{"timestamp":"2025-06-19T07:40:59.567Z","level":"ERROR","message":"Failed to initialize email transporter:","error":"nodemailer.createTransporter is not a function"}
{"timestamp":"2025-06-19T09:01:43.747Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T09:01:43.754Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T09:33:00.384Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T09:33:00.395Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T09:33:24.344Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T09:33:24.347Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T10:40:48.392Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T10:40:48.411Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T10:41:18.288Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T10:41:18.294Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T10:41:24.456Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T10:41:24.458Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T10:42:24.863Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T10:42:24.865Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T10:42:32.497Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-19T10:42:32.499Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-19T10:46:03.565Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Email already registered"}
{"timestamp":"2025-06-19T10:46:03.571Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Email already registered","ip":"::1"}
{"timestamp":"2025-06-19T12:07:36.815Z","level":"ERROR","message":"Client account registration failed","username":"aldfff","error":"Email already registered"}
{"timestamp":"2025-06-19T12:07:36.820Z","level":"ERROR","message":"Client account registration failed","username":"aldfff","error":"Email already registered","ip":"::1"}
{"timestamp":"2025-06-19T12:35:12.558Z","level":"ERROR","message":"Client login failed","username":"fdgfdgfd","error":"Invalid username or password"}
{"timestamp":"2025-06-19T12:35:12.582Z","level":"ERROR","message":"Client login failed","username":"fdgfdgfd","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T11:11:43.445Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-06-22T11:11:43.451Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T11:11:55.858Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password"}
{"timestamp":"2025-06-22T11:11:55.859Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T11:11:56.528Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password"}
{"timestamp":"2025-06-22T11:11:56.529Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T11:11:57.098Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password"}
{"timestamp":"2025-06-22T11:11:57.099Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T11:11:57.277Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password"}
{"timestamp":"2025-06-22T11:11:57.278Z","level":"ERROR","message":"Client login failed","username":"albert12345","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T12:49:24.158Z","level":"ERROR","message":"Failed to send OTP:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"ApiResponse.error is not a function","ip":"::1"}
{"timestamp":"2025-06-22T12:52:44.427Z","level":"ERROR","message":"Failed to send OTP:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"ApiResponse.error is not a function","ip":"::1"}
{"timestamp":"2025-06-22T12:58:09.060Z","level":"ERROR","message":"Failed to send OTP:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"ApiResponse.error is not a function","ip":"::1"}
{"timestamp":"2025-06-22T13:05:28.068Z","level":"ERROR","message":"Failed to send OTP:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"ApiResponse.error is not a function","ip":"::1"}
{"timestamp":"2025-06-22T13:07:22.378Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"ApiResponse.created is not a function","ip":"::1"}
{"timestamp":"2025-06-22T13:07:34.880Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Username already exists"}
{"timestamp":"2025-06-22T13:07:34.880Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-06-22T13:09:20.487Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Username already exists"}
{"timestamp":"2025-06-22T13:09:20.487Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-06-22T13:09:54.768Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Username already exists"}
{"timestamp":"2025-06-22T13:09:54.769Z","level":"ERROR","message":"Client account registration failed","username":"albert4438","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-06-22T13:11:37.302Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Account is pending verification. Please complete your registration."}
{"timestamp":"2025-06-22T13:11:37.304Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Account is pending verification. Please complete your registration.","ip":"::1"}
{"timestamp":"2025-06-22T13:30:39.338Z","level":"ERROR","message":"OTP verification failed:","email":"barangaybula45@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:30:39.342Z","level":"ERROR","message":"OTP verification failed:","email":"barangaybula45@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:31:47.173Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:31:47.174Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:00.667Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:00.668Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:01.794Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:01.796Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:01.957Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:01.962Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:20.093Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:20.098Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:21.789Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:21.790Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:22.009Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:22.011Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:22.205Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:22.207Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:32:22.389Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:32:22.390Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:36:35.560Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-06-22T13:36:35.562Z","level":"ERROR","message":"OTP verification failed:","email":"e70319070@gmail.com","purpose":"admin_registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:46:51.065Z","level":"ERROR","message":"Failed to generate and send OTP:","email":"e70319070@gmail.com","purpose":"registration","error":"Please wait 10 minutes before requesting a new OTP"}
{"timestamp":"2025-06-22T13:46:51.066Z","level":"ERROR","message":"Failed to send OTP:","email":"e70319070@gmail.com","purpose":"registration","error":"Please wait 10 minutes before requesting a new OTP","ip":"::1"}
{"timestamp":"2025-06-22T13:57:15.018Z","level":"ERROR","message":"Failed to generate and send OTP:","email":"e70319070@gmail.com","purpose":"registration","error":"Please wait 10 minutes before requesting a new OTP"}
{"timestamp":"2025-06-22T13:57:15.020Z","level":"ERROR","message":"Failed to send OTP:","email":"e70319070@gmail.com","purpose":"registration","error":"Please wait 10 minutes before requesting a new OTP","ip":"::1"}
{"timestamp":"2025-06-22T14:03:10.039Z","level":"ERROR","message":"Client login failed","username":"nonexistent","error":"Invalid username or password"}
{"timestamp":"2025-06-22T14:03:10.040Z","level":"ERROR","message":"Client login failed","username":"nonexistent","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T14:03:10.162Z","level":"ERROR","message":"Client login failed","username":"nonexistent","error":"Invalid username or password"}
{"timestamp":"2025-06-22T14:03:10.163Z","level":"ERROR","message":"Client login failed","username":"nonexistent","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-06-22T14:03:10.285Z","level":"ERROR","message":"Client login failed","username":"nonexistent","error":"Invalid username or password"}
{"timestamp":"2025-06-22T14:03:10.286Z","level":"ERROR","message":"Client login failed","username":"nonexistent","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:19:52.168Z","level":"ERROR","message":"Client login failed","username":"client","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:19:52.169Z","level":"ERROR","message":"Client login failed","username":"client","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:20:21.167Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:20:21.169Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:20:21.790Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:20:21.792Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:20:21.959Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:20:21.959Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:20:22.123Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:20:22.124Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:20:22.285Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:20:22.286Z","level":"ERROR","message":"Client login failed","username":"Client","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:26:45.508Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password"}
{"timestamp":"2025-07-07T13:26:45.509Z","level":"ERROR","message":"Client login failed","username":"albert4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T13:29:30.982Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:29:30.984Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:30:03.081Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T13:30:04.434Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:30:04.435Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:38.458Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T13:31:42.346Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.347Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.531Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.532Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.731Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.731Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.914Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:42.915Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.097Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.098Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.363Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.363Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.542Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.543Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.693Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.694Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.863Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:31:43.864Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:46:08.071Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:46:08.072Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:48:45.772Z","level":"ERROR","message":"OTP verification failed:","email":"vcba.auth.gateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:48:45.773Z","level":"ERROR","message":"Admin email verification failed","email":"vcba.auth.gateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:48:45.799Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:48:45.799Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:49:18.777Z","level":"ERROR","message":"Failed to resend admin verification email","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T13:49:21.098Z","level":"ERROR","message":"Failed to send email:","to":"vcba.auth.gateway@gmail.com","subject":"Your OTP Code - Barangay Management System","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-07T13:49:21.099Z","level":"ERROR","message":"Failed to send OTP email:","email":"vcba.auth.gateway@gmail.com","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-07T13:49:21.100Z","level":"ERROR","message":"Failed to generate and send OTP:","email":"vcba.auth.gateway@gmail.com","purpose":"registration","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-07T13:49:50.456Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:49:50.457Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:56:58.259Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:56:58.260Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:11.120Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T13:57:13.308Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.308Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.489Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.490Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.672Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.672Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.838Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:13.839Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.016Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.017Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.201Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.202Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.373Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.374Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.551Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.552Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.710Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.710Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.889Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:14.890Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:15.057Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:15.058Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:15.224Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:15.224Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:38.008Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T13:57:39.536Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:39.537Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:39.759Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:39.759Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:39.943Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:39.944Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.120Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.120Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.288Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.289Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.470Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.470Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.669Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.670Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.839Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:40.840Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.040Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.041Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.225Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.226Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.406Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.407Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.586Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.587Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.760Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.765Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.939Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:41.940Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:42.125Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:42.126Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:42.305Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:57:42.306Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:58:05.226Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:58:05.228Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:58:16.931Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:58:16.933Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:59:46.493Z","level":"ERROR","message":"OTP verification failed:","email":"vcbaauthgateway@gmail.com","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:59:46.504Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-07-07T13:59:55.123Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T14:00:18.574Z","level":"ERROR","message":"Admin email verification failed","email":"vcbaauthgateway@gmail.com","error":"Account not found"}
{"timestamp":"2025-07-07T20:59:33.575Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-07T20:59:33.579Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-07T21:02:38.936Z","level":"ERROR","message":"Client account registration failed","username":"testclient","error":"Username already exists"}
{"timestamp":"2025-07-07T21:02:38.937Z","level":"ERROR","message":"Client account registration failed","username":"testclient","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-07-07T21:09:39.094Z","level":"ERROR","message":"Error submitting document request","error":"queries is not iterable","clientId":12}
{"timestamp":"2025-07-07T21:09:39.097Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:238:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":"For job application at ABC Company","payment_method_id":1,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:11:52.768Z","level":"ERROR","message":"Error submitting document request","error":"queries is not iterable","clientId":12}
{"timestamp":"2025-07-07T21:11:52.770Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:239:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":"For job application at ABC Company","payment_method_id":6,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:14:43.619Z","level":"ERROR","message":"Error submitting document request","error":"queries is not iterable","clientId":12}
{"timestamp":"2025-07-07T21:14:43.621Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":"For job application at ABC Company","payment_method_id":6,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:18:04.841Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:18:04.846Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:18:04.848Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":"For job application at ABC Company","payment_method_id":6,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:18:58.578Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:18:58.581Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:18:58.583Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":"For job application at ABC Company","payment_method_id":1,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:20:19.374Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:20:19.376Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:20:19.377Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":"For job application at ABC Company","payment_method_id":1,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:21:21.968Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:21:21.970Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:21:21.971Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":"For job application at ABC Company","payment_method_id":1,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:22:52.616Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:22:52.626Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-07T21:22:52.629Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":"For job application at ABC Company","payment_method_id":1,"delivery_method":"pickup","priority":"normal","has_pending_cases":false,"voter_registration_number":"VR123456789","precinct_number":"001A","emergency_contact_name":"Juan Dela Cruz","emergency_contact_relationship":"Father","emergency_contact_phone":"09123456789","emergency_contact_address":"123 Main St, Barangay Test, Test City"}}
{"timestamp":"2025-07-07T21:39:59.177Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:39:59.180Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:39:59.275Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:39:59.277Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:39:59.304Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:39:59.305Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-07T21:39:59.395Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:39:59.396Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:41:02.461Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:41:02.462Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:41:02.562Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:41:02.563Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:41:02.589Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:41:02.590Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-07T21:41:02.782Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:41:02.787Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:43:50.155Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:43:50.157Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:43:50.231Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:43:50.233Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:43:50.256Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-07T21:43:50.258Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-07T21:43:50.339Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T21:43:50.340Z","level":"ERROR","message":"Unknown column 'cp.address' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.*,\n          dt.type_name as document_type,\n          dt.description as document_type_description,\n          pc.category_name as purpose_category,\n          rs.status_name,\n          rs.description as status_description,\n          pm.method_name as payment_method,\n          pm.is_online as is_online_payment,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.address as client_address,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        WHERE dr.id = ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'cp.address' in 'field list'"}
{"timestamp":"2025-07-07T23:34:25.865Z","level":"ERROR","message":"Failed to get user notifications:"}
{"timestamp":"2025-07-07T23:34:25.867Z","level":"ERROR","message":"Get notifications error:"}
{"timestamp":"2025-07-07T23:34:25.877Z","level":"ERROR","message":"Failed to get unread notification count:"}
{"timestamp":"2025-07-07T23:34:25.878Z","level":"ERROR","message":"Get unread count error:"}
{"timestamp":"2025-07-07T23:34:25.901Z","level":"ERROR","message":"Get notification statistics error:"}
{"timestamp":"2025-07-07T23:42:57.343Z","level":"ERROR","message":"Failed to get user notifications:"}
{"timestamp":"2025-07-07T23:42:57.351Z","level":"ERROR","message":"Get notifications error:"}
{"timestamp":"2025-07-07T23:42:57.383Z","level":"ERROR","message":"Failed to get unread notification count:"}
{"timestamp":"2025-07-07T23:42:57.386Z","level":"ERROR","message":"Get unread count error:"}
{"timestamp":"2025-07-07T23:42:57.439Z","level":"ERROR","message":"Get notification statistics error:"}
{"timestamp":"2025-07-08T00:06:00.309Z","level":"ERROR","message":"Failed to get unread notification count:"}
{"timestamp":"2025-07-08T00:06:00.317Z","level":"ERROR","message":"Get unread count error:"}
{"timestamp":"2025-07-08T00:07:05.500Z","level":"ERROR","message":"Failed to get user notifications:"}
{"timestamp":"2025-07-08T00:07:05.507Z","level":"ERROR","message":"Get notifications error:"}
{"timestamp":"2025-07-08T00:07:05.546Z","level":"ERROR","message":"Failed to get unread notification count:"}
{"timestamp":"2025-07-08T00:07:05.547Z","level":"ERROR","message":"Get unread count error:"}
{"timestamp":"2025-07-08T00:13:16.938Z","level":"ERROR","message":"Failed to get unread notification count:"}
{"timestamp":"2025-07-08T00:13:16.943Z","level":"ERROR","message":"Get unread count error:"}
{"timestamp":"2025-07-08T01:30:32.025Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T01:30:32.095Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T01:30:32.152Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":"It serves as proof that you are a resident of a certain city or municipality, which is often needed when applying for a job or processing government documents.","annual_income":10000,"income_source":"Employment","business_name":"","business_address":"","business_nature":"","has_real_property":false,"property_value":0,"property_location":"","payment_method_id":2,"agree_to_terms":true,"monthly_income":0,"business_income":0,"property_assessed_value":0,"computed_tax":55,"total_fee":60}}
{"timestamp":"2025-07-08T03:05:35.241Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:05:35.247Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:05:35.248Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":2,"purpose_details":"For business, and automotive shop","emergency_contact_name":"Roco Joma Manalo","emergency_contact_relationship":"Friend","emergency_contact_phone":"09955958343","emergency_contact_address":"291 Lacumbre Street. Caloocan City","has_pending_cases":false,"pending_cases_details":"","is_registered_voter":true,"additional_notes":"","payment_method_id":6,"agree_to_terms":true,"total_fee":50}}
{"timestamp":"2025-07-08T03:07:25.757Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:07:25.761Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:07:25.762Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":2,"purpose_details":"Automotive shop","emergency_contact_name":"Roco Joma Manalo","emergency_contact_relationship":"Friend","emergency_contact_phone":"09955958343","emergency_contact_address":"Lacumbre 219, Manila City","has_pending_cases":false,"pending_cases_details":"","is_registered_voter":true,"additional_notes":"","payment_method_id":6,"agree_to_terms":true,"total_fee":50}}
{"timestamp":"2025-07-08T03:13:48.591Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:13:48.597Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:13:48.598Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":2,"purpose_details":"Automotive Shop Relocation","payment_method_id":6,"delivery_method":"pickup","priority":"normal","emergency_contact_name":"Roco Joma Manalo","emergency_contact_relationship":"Friend","emergency_contact_phone":"09955958343","emergency_contact_address":"Lacumbre 121, Manila City","has_pending_cases":false,"pending_cases_details":"","is_registered_voter":true,"additional_notes":"","total_fee":50}}
{"timestamp":"2025-07-08T03:14:42.174Z","level":"ERROR","message":"Error cancelling request","error":"queries is not iterable","requestId":9,"clientId":12}
{"timestamp":"2025-07-08T03:14:42.175Z","level":"ERROR","message":"Controller error - cancelRequest","error":"queries is not iterable","stack":"TypeError: queries is not iterable\n    at executeTransaction (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:53:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DocumentRequest.updateStatus (D:\\rhai_front_and_back\\rhai_backend\\src\\models\\DocumentRequest.js:314:5)\n    at async DocumentRequestService.cancelRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:456:7)\n    at async cancelRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:156:22)","requestId":"9","clientId":12,"reason":"Cancelled by user"}
{"timestamp":"2025-07-08T03:18:11.113Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:18:11.126Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:18:11.129Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":2,"purpose_details":"Automotive Shop, Relocation","payment_method_id":6,"delivery_method":"pickup","priority":"normal","emergency_contact_name":"Roco Joma Manalo","emergency_contact_relationship":"Friend","emergency_contact_phone":"09955958343","emergency_contact_address":"19 Lacumbre Street, Manila City","has_pending_cases":false,"pending_cases_details":null,"is_registered_voter":true,"additional_notes":"The Automotive Shop, Relocation will be located at the Marcos High Way","total_fee":50}}
{"timestamp":"2025-07-08T03:18:29.335Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:18:29.340Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-08T03:18:29.341Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:246:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:61:22)","clientId":12,"requestData":{"document_type_id":2,"purpose_category_id":2,"purpose_details":"Automotive Shop, Relocation","payment_method_id":6,"delivery_method":"pickup","priority":"normal","emergency_contact_name":"Roco Joma Manalo","emergency_contact_relationship":"Friend","emergency_contact_phone":"09955958343","emergency_contact_address":"19 Lacumbre Street, Manila City","has_pending_cases":false,"pending_cases_details":null,"is_registered_voter":true,"additional_notes":"The Automotive Shop, Relocation will be located at the Marcos High Way","total_fee":50}}
{"timestamp":"2025-07-08T03:36:56.963Z","level":"ERROR","message":"Error cancelling request","error":"queries is not iterable","requestId":12,"clientId":12}
{"timestamp":"2025-07-08T03:36:56.967Z","level":"ERROR","message":"Controller error - cancelRequest","error":"queries is not iterable","stack":"TypeError: queries is not iterable\n    at executeTransaction (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:53:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DocumentRequest.updateStatus (D:\\rhai_front_and_back\\rhai_backend\\src\\models\\DocumentRequest.js:314:5)\n    at async DocumentRequestService.cancelRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:488:7)\n    at async cancelRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:156:22)","requestId":"12","clientId":12,"reason":"Cancelled by user"}
{"timestamp":"2025-07-08T03:37:13.057Z","level":"ERROR","message":"Error cancelling request","error":"queries is not iterable","requestId":12,"clientId":12}
{"timestamp":"2025-07-08T03:37:13.058Z","level":"ERROR","message":"Controller error - cancelRequest","error":"queries is not iterable","stack":"TypeError: queries is not iterable\n    at executeTransaction (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:53:37)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async DocumentRequest.updateStatus (D:\\rhai_front_and_back\\rhai_backend\\src\\models\\DocumentRequest.js:314:5)\n    at async DocumentRequestService.cancelRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:488:7)\n    at async cancelRequest (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:156:22)","requestId":"12","clientId":12,"reason":"Cancelled by user"}
{"timestamp":"2025-07-08T03:43:56.912Z","level":"ERROR","message":"Error cancelling request","error":"Unknown column 'notes' in 'field list'","requestId":12,"clientId":12}
{"timestamp":"2025-07-08T03:45:17.862Z","level":"ERROR","message":"Error cancelling request","error":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`request_status_history`, CONSTRAINT `request_status_history_ibfk_4` FOREIGN KEY (`changed_by`) REFERENCES `admin_employee_accounts` (`id`))","requestId":12,"clientId":12}
{"timestamp":"2025-07-08T15:41:24.593Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T15:41:24.594Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T16:47:34.524Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T16:47:34.528Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T16:52:41.970Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T16:52:41.971Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T16:55:13.880Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T16:55:13.885Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T16:55:40.108Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T16:56:39.112Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T16:56:39.113Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T16:57:21.644Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T16:57:21.645Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T16:58:50.907Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T16:59:02.283Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:03:36.640Z","level":"ERROR","message":"Client login failed","username":"jerome123","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:03:36.643Z","level":"ERROR","message":"Client login failed","username":"jerome123","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:27.135Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:27.136Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:27.577Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:27.578Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:27.962Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:27.963Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:28.347Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:28.348Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:28.694Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:28.695Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:29.056Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:29.057Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:29.451Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:29.452Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:29.844Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:29.845Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:30.201Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:30.202Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:30.557Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:30.558Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:30.922Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:30.923Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:07:31.260Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-08T17:07:31.260Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-08T17:11:49.892Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:11:50.908Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:12:55.813Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:12:56.828Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:12:57.878Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:16:59.230Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-08T17:18:04.764Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T17:18:04.765Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T17:18:05.633Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-08T17:18:05.634Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-08T17:18:16.911Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T04:03:03.450Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T04:03:12.268Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:03:12.269Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:06:28.731Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:06:28.733Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:28:45.559Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:28:45.561Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:28:46.769Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:28:46.769Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:28:46.957Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:28:46.958Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:28:47.117Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:28:47.118Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:28:47.305Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:28:47.306Z","level":"ERROR","message":"Approve request error:"}
{"timestamp":"2025-07-09T04:43:19.684Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T04:48:27.939Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T04:48:48.601Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:48:48.602Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T04:49:21.042Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T05:01:42.838Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T15:08:42.455Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T16:09:48.420Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-09T16:13:17.120Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T16:13:17.121Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-09T16:16:22.672Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T13:45:35.577Z","level":"ERROR","message":"Payment link creation failed","error":"Unknown column 'dt.document_name' in 'field list'","stack":"Error: Unknown column 'dt.document_name' in 'field list'\n    at PromisePool.execute (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\mysql2\\lib\\promise\\pool.js:54:22)\n    at executeQuery (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:37:34)\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:41:36)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at handleValidationErrors (D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:15:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at middleware (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express-validator\\lib\\middlewares\\check.js:16:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:47:19.418Z","level":"ERROR","message":"Payment link creation failed","error":"Unknown column 'dt.document_name' in 'field list'","stack":"Error: Unknown column 'dt.document_name' in 'field list'\n    at PromisePool.execute (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\mysql2\\lib\\promise\\pool.js:54:22)\n    at executeQuery (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:37:34)\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:41:36)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at handleValidationErrors (D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:15:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at middleware (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express-validator\\lib\\middlewares\\check.js:16:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":13,"payment_method_id":2},"userId":12}
{"timestamp":"2025-07-13T13:49:10.468Z","level":"ERROR","message":"Payment link creation failed","error":"Unknown column 'dt.document_name' in 'field list'","stack":"Error: Unknown column 'dt.document_name' in 'field list'\n    at PromisePool.execute (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\mysql2\\lib\\promise\\pool.js:54:22)\n    at executeQuery (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:37:34)\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:41:36)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at handleValidationErrors (D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:15:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at middleware (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express-validator\\lib\\middlewares\\check.js:16:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":13,"payment_method_id":2},"userId":12}
{"timestamp":"2025-07-13T13:52:54.776Z","level":"ERROR","message":"Payment link creation failed","error":"Cannot read properties of undefined (reading 'paymongoService')","stack":"TypeError: Cannot read properties of undefined (reading 'paymongoService')\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:86:38)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":13,"payment_method_id":2},"userId":12}
{"timestamp":"2025-07-13T13:54:36.778Z","level":"ERROR","message":"Payment link creation failed","error":"Cannot read properties of undefined (reading 'paymongoService')","stack":"TypeError: Cannot read properties of undefined (reading 'paymongoService')\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:29:17)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at handleValidationErrors (D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:15:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at middleware (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express-validator\\lib\\middlewares\\check.js:16:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:55:41.114Z","level":"ERROR","message":"Payment link creation failed","error":"Cannot read properties of undefined (reading 'paymongoService')","stack":"TypeError: Cannot read properties of undefined (reading 'paymongoService')\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:29:17)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at handleValidationErrors (D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:15:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at middleware (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express-validator\\lib\\middlewares\\check.js:16:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:56:23.328Z","level":"ERROR","message":"Payment link creation failed","error":"Cannot read properties of undefined (reading 'paymongoService')","stack":"TypeError: Cannot read properties of undefined (reading 'paymongoService')\n    at initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:34:17)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at handleValidationErrors (D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:15:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at middleware (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express-validator\\lib\\middlewares\\check.js:16:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:58:17.919Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415097311_285bbd3a","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T13:58:17.921Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:82:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:118:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:58:26.549Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415106064_e47e19a2","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T13:58:26.550Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:82:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:118:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:58:33.701Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415113369_1fc0fad2","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T13:58:33.702Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:82:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:118:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:58:59.711Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415139259_db18efe4","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T13:58:59.712Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:82:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:118:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:59:14.351Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415153939_e0413d6a","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T13:59:14.352Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:82:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:130:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T13:59:59.145Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415198698_e57dfc82","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T13:59:59.146Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:82:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:130:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:01:55.105Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415314549_d723d035","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T14:01:55.106Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:84:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:130:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:02:06.545Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415326245_92c5bce1","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T14:02:06.546Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:84:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:130:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:02:29.325Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415349004_a7d27042","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T14:02:29.326Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:84:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:130:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:07:24.946Z","level":"ERROR","message":"Failed to create PayMongo payment link","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"linkData":{"amount":5575,"description":"BOSFDR - Barangay Clearance Request #12","remarks":"Payment for Barangay Clearance via PayMongo - Bank Transfer","metadata":{"request_id":"12","transaction_id":"TXN_1752415644500_c828a8d5","client_id":"12","document_type":"Barangay Clearance","payment_method":"PayMongo - Bank Transfer"}}}
{"timestamp":"2025-07-13T14:07:24.947Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:84:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:08:53.582Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:08:53.583Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:85:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:11:53.139Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:11:53.141Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:19:33.893Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:19:33.896Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:20:11.324Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:20:11.325Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:22:00.225Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:22:00.226Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:22:56.990Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:22:56.991Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:23:22.412Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":5575,"requestDescription":"BOSFDR - Barangay Clearance Request #12"}
{"timestamp":"2025-07-13T14:23:22.413Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:24:23.478Z","level":"ERROR","message":"PayMongo API Error Details:","status":400,"statusText":"Bad Request","errorData":{"errors":[{"code":"parameter_below_minimum","detail":"Please enter an amount at least Php 100.00."}]},"requestAmount":6675,"requestDescription":"BOSFDR - Barangay Clearance Request #13"}
{"timestamp":"2025-07-13T14:24:23.479Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":13,"payment_method_id":2},"userId":12}
{"timestamp":"2025-07-13T14:25:59.635Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:26:49.327Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:151:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:45:50.837Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:46:44.124Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:46:45.506Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:46:46.434Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:47:06.633Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:47:48.331Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:47:52.620Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T14:47:56.374Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:159:27)","body":{"request_id":12,"payment_method_id":6},"userId":12}
{"timestamp":"2025-07-13T15:02:34.109Z","level":"ERROR","message":"Invalid webhook signature format","signature":"test-signature"}
{"timestamp":"2025-07-13T15:03:56.724Z","level":"ERROR","message":"Webhook processing failed","error":"Unknown column 'resource_type' in 'field list'","stack":"Error: Unknown column 'resource_type' in 'field list'\n    at PromisePool.execute (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\mysql2\\lib\\promise\\pool.js:54:22)\n    at executeQuery (D:\\rhai_front_and_back\\rhai_backend\\src\\config\\database.js:37:34)\n    at PaymentController.handleWebhook (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:268:13)\n    at D:\\rhai_front_and_back\\rhai_backend\\src\\routes\\paymentRoutes.js:66:35\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at next (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:149:13)\n    at Route.dispatch (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\route.js:119:3)\n    at Layer.handle [as handle_request] (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\layer.js:95:5)\n    at D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\index.js:284:15\n    at Function.process_params (D:\\rhai_front_and_back\\rhai_backend\\node_modules\\express\\lib\\router\\index.js:346:12)","body":{"data":{"id":"evt_1752419036658","type":"event","attributes":{"type":"link.payment.paid","livemode":false,"data":{"id":"link_1752419036658","type":"link","attributes":{"amount":10000,"description":"BOSFDR - Barangay Clearance Request #12","status":"paid","checkout_url":"https://checkout.paymongo.com/links/link_1752419036658","reference_number":"REF_1752419036658","payments":[{"id":"pay_1752419036658","type":"payment","attributes":{"amount":10000,"status":"paid","paid_at":"2025-07-13T15:03:56.658Z"}}],"metadata":{"request_id":"12","transaction_id":"TXN_1752419036659_test","client_id":"12"}}},"created_at":"2025-07-13T15:03:56.659Z"}}}}
{"timestamp":"2025-07-13T15:27:07.544Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:09.443Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:10.311Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:10.517Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:10.741Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:10.952Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:11.202Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:11.437Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:11.679Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:11.883Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:27:12.115Z","level":"ERROR","message":"Document request not found","request_id":15,"client_id":12}
{"timestamp":"2025-07-13T15:38:24.162Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T15:38:51.901Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T15:39:23.608Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-13T15:39:23.609Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-13T17:48:08.416Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password"}
{"timestamp":"2025-07-13T17:48:08.418Z","level":"ERROR","message":"Client login failed","username":"testclient","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-13T17:59:54.819Z","level":"ERROR","message":"Client account registration failed","username":"revo4438","error":"Username already exists"}
{"timestamp":"2025-07-13T17:59:54.821Z","level":"ERROR","message":"Client account registration failed","username":"revo4438","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-07-13T18:07:46.355Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-13T18:07:46.360Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-13T18:13:47.687Z","level":"ERROR","message":"Client account registration failed","username":"revo4438","error":"Username already exists"}
{"timestamp":"2025-07-13T18:13:47.688Z","level":"ERROR","message":"Client account registration failed","username":"revo4438","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-07-13T20:33:33.939Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-13T20:33:33.940Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-13T20:41:47.159Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T20:42:23.361Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T20:42:45.580Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T21:14:47.980Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T21:18:41.961Z","level":"ERROR","message":"Email connection verification failed:","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-13T21:19:17.319Z","level":"ERROR","message":"Email connection verification failed:","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-13T21:45:25.648Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T22:03:12.441Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-13T22:03:19.204Z","level":"ERROR","message":"Table 'barangay_management_system.request_statuses' doesn't exist","code":"ER_NO_SUCH_TABLE","errno":1146,"sql":"\n        SELECT dr.*, c.first_name, c.last_name, c.email,\n               dt.type_name, rs_old.status_name as old_status,\n               rs_new.status_name as new_status\n        FROM document_requests dr\n        JOIN client_profiles c ON dr.client_id = c.account_id\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN request_statuses rs_old ON ? = rs_old.id\n        JOIN request_statuses rs_new ON dr.status_id = rs_new.id\n        WHERE dr.id = ?\n      ","sqlState":"42S02","sqlMessage":"Table 'barangay_management_system.request_statuses' doesn't exist"}
{"timestamp":"2025-07-14T19:48:35.251Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T19:48:35.253Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-14T19:48:35.253Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-14T19:49:14.733Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T19:49:14.733Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-14T19:49:14.734Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-14T19:49:14.749Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T19:49:14.749Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T19:49:49.782Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T19:49:49.783Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T20:04:40.020Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T20:04:40.021Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T20:53:10.951Z","level":"ERROR","message":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-07-14T20:53:10.953Z","level":"ERROR","message":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-07-14T20:53:10.960Z","level":"ERROR","message":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-07-14T20:53:50.118Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T20:53:50.118Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T20:54:34.204Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T20:54:34.205Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T21:04:39.497Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T21:04:39.498Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T21:05:21.194Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T21:05:21.194Z","level":"ERROR","message":"Unknown column 'aea.is_active' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT aep.email, aep.first_name, aep.last_name\n        FROM admin_employee_profiles aep\n        JOIN admin_employee_accounts aea ON aep.account_id = aea.id\n        WHERE aea.is_active = 1 AND aep.email IS NOT NULL AND aep.email != ''\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'aea.is_active' in 'where clause'"}
{"timestamp":"2025-07-14T21:06:09.963Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T21:30:48.912Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T21:32:40.535Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T21:46:08.252Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T21:47:43.773Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T21:47:43.774Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T21:56:14.148Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-14T22:05:26.755Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T22:05:26.756Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T22:05:27.022Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T22:05:27.022Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T22:05:27.304Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T22:05:27.306Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T22:05:27.572Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T22:05:27.573Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:18:57.993Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:18:57.996Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:19:05.845Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:19:05.846Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:19:06.861Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:19:06.862Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:19:07.200Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:19:07.201Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:19:07.688Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:19:07.689Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:19:32.593Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:19:32.595Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:40.205Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:40.206Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:40.904Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:40.905Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:41.068Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:41.068Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:41.234Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:41.234Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:41.413Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:41.414Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:41.585Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:41.585Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:52.673Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:52.674Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:53.849Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:53.850Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:54.023Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:54.024Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:54.207Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:54.207Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-14T23:21:54.397Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-14T23:21:54.397Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-15T02:55:15.622Z","level":"ERROR","message":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`request_status_history`, CONSTRAINT `request_status_history_ibfk_4` FOREIGN KEY (`changed_by`) REFERENCES `admin_employee_accounts` (`id`))","code":"ER_NO_REFERENCED_ROW_2","errno":1452,"sql":"\n          INSERT INTO request_status_history\n          (request_id, old_status_id, new_status_id, changed_by, change_reason)\n          VALUES (?, ?, ?, ?, ?)\n        ","sqlState":"23000","sqlMessage":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`request_status_history`, CONSTRAINT `request_status_history_ibfk_4` FOREIGN KEY (`changed_by`) REFERENCES `admin_employee_accounts` (`id`))"}
{"timestamp":"2025-07-15T02:56:26.678Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T02:56:26.679Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T02:56:26.679Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T03:15:51.672Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T03:15:51.686Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T03:16:28.427Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T03:16:28.478Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T05:29:52.138Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T05:31:32.292Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T05:31:33.303Z","level":"ERROR","message":"❌ AdminDocumentService: Status update failed:"}
{"timestamp":"2025-07-15T05:37:59.477Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T05:38:00.505Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T05:46:22.913Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:22.917Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:46:23.913Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:23.914Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:46:24.194Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:24.195Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:46:24.368Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:24.369Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:46:24.539Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:24.540Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:46:25.854Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:25.855Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:46:26.185Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":62,"clientId":12}
{"timestamp":"2025-07-15T05:46:26.186Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"62","clientId":12}
{"timestamp":"2025-07-15T05:47:11.153Z","level":"ERROR","message":"❌ AdminDocumentService: Status update failed:"}
{"timestamp":"2025-07-15T05:47:43.099Z","level":"ERROR","message":"❌ Failed to send real-time notification:"}
{"timestamp":"2025-07-15T05:57:33.905Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":65,"clientId":12}
{"timestamp":"2025-07-15T05:57:33.906Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"65","clientId":12}
{"timestamp":"2025-07-15T06:13:34.216Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":65,"clientId":12}
{"timestamp":"2025-07-15T06:13:34.217Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"65","clientId":12}
{"timestamp":"2025-07-15T06:13:36.883Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":65,"clientId":12}
{"timestamp":"2025-07-15T06:13:36.884Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"65","clientId":12}
{"timestamp":"2025-07-15T07:55:13.870Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":74,"clientId":12}
{"timestamp":"2025-07-15T07:55:13.872Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"74","clientId":12}
{"timestamp":"2025-07-15T08:49:44.394Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-15T08:49:44.396Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-15T08:55:46.649Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T08:55:49.333Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T09:15:42.752Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":76,"clientId":12}
{"timestamp":"2025-07-15T09:15:42.753Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:506:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"76","clientId":12}
{"timestamp":"2025-07-15T10:18:46.282Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-15T10:18:46.284Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":12}
{"timestamp":"2025-07-15T10:20:51.400Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:20:55.150Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:35:55.422Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:35:58.282Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:35:58.283Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T10:35:58.283Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T10:36:02.742Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:36:02.743Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T10:36:02.744Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T10:49:50.816Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:49:54.294Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T10:49:54.295Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T10:49:54.295Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T11:01:41.234Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:01:41.235Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T11:01:41.235Z","level":"ERROR","message":"Failed to send email notification:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T11:04:18.332Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:04:18.333Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:06:38.332Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:06:38.333Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:07:06.829Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:07:06.830Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:12:35.366Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:12:35.367Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:14:34.100Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:14:34.101Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:25:13.961Z","level":"ERROR","message":"Failed to send email:","to":"ailuzuriaga14@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:25:16.429Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - undefined","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:25:16.430Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T11:25:16.430Z","level":"ERROR","message":"Failed to send email notification","operationId":"status-change-90-1752578715003","email":"revzonjerome21@gmail.com","requestId":90,"error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:25:19.813Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - undefined","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:25:19.814Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T11:25:19.814Z","level":"ERROR","message":"Failed to send email notification","operationId":"status-change-90-1752578718043","email":"revzonjerome21@gmail.com","requestId":90,"error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:40:58.111Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-07-15T11:41:22.743Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-07-15T11:41:22.744Z","level":"ERROR","message":"Failed to send status change email:","code":"EAUTH","command":"API"}
{"timestamp":"2025-07-15T11:41:22.745Z","level":"ERROR","message":"Failed to send email notification (non-critical)","error":"Missing credentials for \"PLAIN\"","requestId":92,"email":"revzonjerome21@gmail.com"}
{"timestamp":"2025-07-15T11:41:45.488Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":92,"clientId":12}
{"timestamp":"2025-07-15T11:41:45.490Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:507:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:135:22)","requestId":"92","clientId":12}
{"timestamp":"2025-07-16T04:09:36.598Z","level":"ERROR","message":"Request not approved for payment","status_id":10,"required_status":4}
{"timestamp":"2025-07-16T04:09:47.200Z","level":"ERROR","message":"Request not approved for payment","status_id":10,"required_status":4}
{"timestamp":"2025-07-16T04:12:31.469Z","level":"ERROR","message":"Error cancelling request","error":"Request cannot be cancelled at this stage","requestId":97,"clientId":12}
{"timestamp":"2025-07-16T04:12:31.471Z","level":"ERROR","message":"Controller error - cancelRequest","error":"Request cannot be cancelled at this stage","stack":"Error: Request cannot be cancelled at this stage\n    at DocumentRequestService.cancelRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:488:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async cancelRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:165:22)","requestId":"97","clientId":12,"reason":"I change my mind"}
{"timestamp":"2025-07-16T04:12:49.467Z","level":"ERROR","message":"Error cancelling request","error":"Request cannot be cancelled at this stage","requestId":97,"clientId":12}
{"timestamp":"2025-07-16T04:12:49.469Z","level":"ERROR","message":"Controller error - cancelRequest","error":"Request cannot be cancelled at this stage","stack":"Error: Request cannot be cancelled at this stage\n    at DocumentRequestService.cancelRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:488:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async cancelRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:165:22)","requestId":"97","clientId":12,"reason":"dfsdfsdfdfsd"}
{"timestamp":"2025-07-16T04:21:35.105Z","level":"ERROR","message":"Error cancelling request","error":"Request cannot be cancelled at this stage","requestId":97,"clientId":12}
{"timestamp":"2025-07-16T04:21:35.107Z","level":"ERROR","message":"Controller error - cancelRequest","error":"Request cannot be cancelled at this stage","stack":"Error: Request cannot be cancelled at this stage\n    at DocumentRequestService.cancelRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:488:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async cancelRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:165:22)","requestId":"97","clientId":12,"reason":"I have traveled in Davao"}
{"timestamp":"2025-07-16T10:47:06.417Z","level":"ERROR","message":"Payment link creation failed","error":"processingFee is not defined","stack":"ReferenceError: processingFee is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:193:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T10:47:11.594Z","level":"ERROR","message":"Payment link creation failed","error":"processingFee is not defined","stack":"ReferenceError: processingFee is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:193:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T10:47:20.048Z","level":"ERROR","message":"Payment link creation failed","error":"processingFee is not defined","stack":"ReferenceError: processingFee is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:193:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T10:52:00.825Z","level":"ERROR","message":"Payment link creation failed","error":"processingFee is not defined","stack":"ReferenceError: processingFee is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:194:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T10:53:12.221Z","level":"ERROR","message":"Payment link creation failed","error":"processingFee is not defined","stack":"ReferenceError: processingFee is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:194:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T10:53:53.201Z","level":"ERROR","message":"Payment link creation failed","error":"baseAmount is not defined","stack":"ReferenceError: baseAmount is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:226:22)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T10:54:32.703Z","level":"ERROR","message":"Payment link creation failed","error":"baseAmount is not defined","stack":"ReferenceError: baseAmount is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:226:22)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":98,"payment_method_id":3},"userId":12}
{"timestamp":"2025-07-16T16:10:47.585Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-07-16T16:10:47.587Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-07-22T11:53:29.279Z","level":"ERROR","message":"Failed to send email:","to":"revzonjerome21@gmail.com","subject":"Document Request Status Update - Cedula","error":"connect ETIMEDOUT 142.250.4.109:587"}
{"timestamp":"2025-07-22T11:53:29.281Z","level":"ERROR","message":"Failed to send status change email:","errno":-4039,"code":"ESOCKET","syscall":"connect","address":"142.250.4.109","port":587,"command":"CONN"}
{"timestamp":"2025-07-22T11:53:29.281Z","level":"ERROR","message":"Failed to send email notification:","errno":-4039,"code":"ESOCKET","syscall":"connect","address":"142.250.4.109","port":587,"command":"CONN"}
{"timestamp":"2025-07-23T04:43:10.112Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:10.213Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:18.890Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:18.982Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:23.841Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:36.093Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:36.236Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:53.808Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:43:53.812Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:44:20.959Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:44:31.948Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:44:55.189Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:45:42.641Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:46:08.351Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:48:02.963Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:48:21.934Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:52:23.931Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T04:52:48.181Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T05:01:02.794Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T05:01:29.130Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T05:18:11.788Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T05:52:38.094Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T05:53:01.512Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:01:03.682Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:01:19.089Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:11:15.536Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:12:11.504Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:14:10.407Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:19:40.790Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:20:27.535Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:45:59.554Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:54:13.015Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:57:38.144Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T07:57:38.159Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T08:07:58.322Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T08:10:56.096Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T08:10:56.207Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T08:21:23.532Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T08:28:45.251Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T08:43:31.112Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T09:01:54.666Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T09:31:49.596Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T09:31:49.942Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T09:45:56.768Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T09:54:47.093Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T09:54:48.380Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:04:52.126Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:04:52.176Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:16:19.269Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:16:21.554Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:21:01.933Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:21:04.192Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:25:17.002Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:25:17.110Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:32:26.912Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-23T10:32:27.009Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-27T12:27:20.207Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-07-27T12:27:20.272Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-08-05T22:42:54.419Z","level":"ERROR","message":"OTP verification failed:","email":"ailuzuriaga14@gmail.com","purpose":"email_verification","error":"Invalid or expired OTP"}
{"timestamp":"2025-08-05T22:42:54.422Z","level":"ERROR","message":"Email verification failed","email":"ailuzuriaga14@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-08-05T22:42:54.424Z","level":"ERROR","message":"Client email verification failed","email":"ailuzuriaga14@gmail.com","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-08-07T14:46:12.584Z","level":"ERROR","message":"Failed to get document file","documentId":6,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:12.594Z","level":"ERROR","message":"Failed to get document file","documentId":"6","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:12.993Z","level":"ERROR","message":"Failed to get document file","documentId":5,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:12.994Z","level":"ERROR","message":"Failed to get document file","documentId":"5","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.030Z","level":"ERROR","message":"Failed to get document file","documentId":4,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.032Z","level":"ERROR","message":"Failed to get document file","documentId":"4","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.068Z","level":"ERROR","message":"Failed to get document file","documentId":3,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.070Z","level":"ERROR","message":"Failed to get document file","documentId":"3","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.105Z","level":"ERROR","message":"Failed to get document file","documentId":2,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.110Z","level":"ERROR","message":"Failed to get document file","documentId":"2","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.154Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:46:13.156Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.096Z","level":"ERROR","message":"Failed to get document file","documentId":6,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.100Z","level":"ERROR","message":"Failed to get document file","documentId":"6","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.156Z","level":"ERROR","message":"Failed to get document file","documentId":5,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.157Z","level":"ERROR","message":"Failed to get document file","documentId":"5","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.196Z","level":"ERROR","message":"Failed to get document file","documentId":4,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.198Z","level":"ERROR","message":"Failed to get document file","documentId":"4","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.236Z","level":"ERROR","message":"Failed to get document file","documentId":3,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.237Z","level":"ERROR","message":"Failed to get document file","documentId":"3","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.280Z","level":"ERROR","message":"Failed to get document file","documentId":2,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.281Z","level":"ERROR","message":"Failed to get document file","documentId":"2","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.324Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:23.326Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.654Z","level":"ERROR","message":"Failed to get document file","documentId":6,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.656Z","level":"ERROR","message":"Failed to get document file","documentId":"6","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.687Z","level":"ERROR","message":"Failed to get document file","documentId":5,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.688Z","level":"ERROR","message":"Failed to get document file","documentId":"5","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.717Z","level":"ERROR","message":"Failed to get document file","documentId":4,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.719Z","level":"ERROR","message":"Failed to get document file","documentId":"4","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.746Z","level":"ERROR","message":"Failed to get document file","documentId":3,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.747Z","level":"ERROR","message":"Failed to get document file","documentId":"3","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.786Z","level":"ERROR","message":"Failed to get document file","documentId":2,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.787Z","level":"ERROR","message":"Failed to get document file","documentId":"2","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.824Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:48:28.826Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:51:47.505Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:51:47.507Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:55:14.178Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:55:14.181Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.499Z","level":"ERROR","message":"Failed to get document file","documentId":6,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.501Z","level":"ERROR","message":"Failed to get document file","documentId":"6","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.545Z","level":"ERROR","message":"Failed to get document file","documentId":5,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.546Z","level":"ERROR","message":"Failed to get document file","documentId":"5","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.581Z","level":"ERROR","message":"Failed to get document file","documentId":4,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.582Z","level":"ERROR","message":"Failed to get document file","documentId":"4","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.618Z","level":"ERROR","message":"Failed to get document file","documentId":3,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.620Z","level":"ERROR","message":"Failed to get document file","documentId":"3","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.669Z","level":"ERROR","message":"Failed to get document file","documentId":2,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.673Z","level":"ERROR","message":"Failed to get document file","documentId":"2","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.724Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:33.729Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.040Z","level":"ERROR","message":"Failed to get document file","documentId":6,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.042Z","level":"ERROR","message":"Failed to get document file","documentId":"6","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.091Z","level":"ERROR","message":"Failed to get document file","documentId":5,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.093Z","level":"ERROR","message":"Failed to get document file","documentId":"5","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.137Z","level":"ERROR","message":"Failed to get document file","documentId":4,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.140Z","level":"ERROR","message":"Failed to get document file","documentId":"4","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.169Z","level":"ERROR","message":"Failed to get document file","documentId":3,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.171Z","level":"ERROR","message":"Failed to get document file","documentId":"3","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.288Z","level":"ERROR","message":"Failed to get document file","documentId":2,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.289Z","level":"ERROR","message":"Failed to get document file","documentId":"2","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.361Z","level":"ERROR","message":"Failed to get document file","documentId":1,"requestingUserId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T14:57:47.368Z","level":"ERROR","message":"Failed to get document file","documentId":"1","userId":32,"error":"Document file not found on server"}
{"timestamp":"2025-08-07T22:21:17.290Z","level":"ERROR","message":"Failed to get residency verification status","clientId":33,"error":"accountId is not defined"}
{"timestamp":"2025-08-07T22:21:32.231Z","level":"ERROR","message":"Failed to get residency verification status","clientId":33,"error":"accountId is not defined"}
{"timestamp":"2025-08-07T22:22:04.572Z","level":"ERROR","message":"Failed to get residency verification status","clientId":33,"error":"accountId is not defined"}
{"timestamp":"2025-08-10T01:21:57.519Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-08-10T01:21:57.524Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-08-10T01:23:05.225Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-08-10T01:23:05.228Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-08-12T18:43:58.138Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 500","stack":"Error: PayMongo payment link creation failed: Request failed with status code 500\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":122,"payment_method_id":2},"userId":34}
{"timestamp":"2025-08-12T18:44:52.761Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 500","stack":"Error: PayMongo payment link creation failed: Request failed with status code 500\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":122,"payment_method_id":2},"userId":34}
{"timestamp":"2025-08-12T18:45:04.824Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 500","stack":"Error: PayMongo payment link creation failed: Request failed with status code 500\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":122,"payment_method_id":2},"userId":34}
{"timestamp":"2025-08-12T18:45:48.712Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 500","stack":"Error: PayMongo payment link creation failed: Request failed with status code 500\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":122,"payment_method_id":2},"userId":34}
{"timestamp":"2025-08-12T19:04:09.613Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 500","stack":"Error: PayMongo payment link creation failed: Request failed with status code 500\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":122,"payment_method_id":2,"customer_email":"test@example.com"},"userId":34}
{"timestamp":"2025-08-12T19:33:13.277Z","level":"ERROR","message":"Failed to create PayMongo payment intent","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_blank","detail":"The value for metadata cannot be blank.","source":{"pointer":"metadata","attribute":"metadata"}}]},"paymentData":{"amount":10000,"description":"Health Check - Payment Intent","metadata":{}}}
{"timestamp":"2025-08-12T19:33:13.849Z","level":"ERROR","message":"Payment status check failed","paymentId":"cs_etU1ZE82hgihhfFE24qyrtQr","type":"session","error":"Request failed with status code 500"}
{"timestamp":"2025-08-12T19:34:11.680Z","level":"ERROR","message":"Payment checkout session creation failed","error":"sessionData is not defined","stack":"ReferenceError: sessionData is not defined\n    at PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:203:9)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","body":{"request_id":122,"payment_method_id":2,"customer_email":"test@example.com"},"userId":34}
{"timestamp":"2025-08-12T20:19:23.750Z","level":"ERROR","message":"Failed to create PayMongo payment intent","error":"Request failed with status code 400","response":{"errors":[{"code":"parameter_blank","detail":"The value for metadata cannot be blank.","source":{"pointer":"metadata","attribute":"metadata"}}]},"paymentData":{"amount":10000,"description":"Health Check - Payment Intent","metadata":{}}}
{"timestamp":"2025-08-12T20:19:24.217Z","level":"ERROR","message":"Payment status check failed","paymentId":"cs_nAjKJFxYUo1SF3mhAarbKnsC","type":"session","error":"Request failed with status code 500"}
{"timestamp":"2025-08-12T20:21:33.067Z","level":"ERROR","message":"Payment status check failed","paymentId":"cs_6S4jimRmVm9xKa4qhWS8bTgV","type":"session","error":"Request failed with status code 500"}
{"timestamp":"2025-08-12T20:56:15.068Z","level":"ERROR","message":"Document request not found","request_id":122,"client_id":1}
{"timestamp":"2025-08-12T21:09:48.629Z","level":"ERROR","message":"Document request not found","request_id":122,"client_id":1}
{"timestamp":"2025-08-12T21:15:14.002Z","level":"ERROR","message":"Document request not found","request_id":122,"client_id":1}
{"timestamp":"2025-08-12T21:17:35.784Z","level":"ERROR","message":"Document request not found","request_id":122,"client_id":1}
{"timestamp":"2025-08-12T21:24:51.163Z","level":"ERROR","message":"Document request not found","request_id":122,"client_id":1}
{"timestamp":"2025-08-13T02:39:48.174Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:39:48.178Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:39:48.180Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:264:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":2,"purpose_category_id":6,"purpose_details":"Test request for someone else with authorized pickup","payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":"Testing third-party request functionality","beneficiary":{"first_name":"TestUser787524","middle_name":"Test","last_name":"Family787524","suffix":"","birth_date":"1990-05-15","gender":"female","civil_status_id":1,"nationality":"Filipino","phone_number":"09123456789","email":"testuser787524@example.com","house_number":"123","street":"Main Street","barangay":"Barangay Test","city_municipality":"Test City","province":"Test Province","relationship_to_requestor":"sister"},"authorized_pickup":{"first_name":"Juan","middle_name":"Dela","last_name":"Cruz","suffix":"","phone_number":"09987654321","email":"juan.cruz@example.com","relationship_to_beneficiary":"spouse"},"has_pending_cases":false,"pending_cases_details":null}}
{"timestamp":"2025-08-13T02:42:54.109Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:42:54.113Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:42:54.114Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:264:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":2,"purpose_category_id":6,"purpose_details":"Test request for someone else with authorized pickup - testing system functionality","payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":"Testing third-party request functionality","beneficiary":{"first_name":"TestUser973269","middle_name":"Test","last_name":"Family973269","suffix":"","birth_date":"1990-05-15","gender":"female","civil_status_id":1,"nationality":"Filipino","phone_number":"09123456789","email":"testuser973269@example.com","house_number":"123","street":"Main Street","barangay":"Barangay Test","city_municipality":"Test City","province":"Test Province","relationship_to_requestor":"sister"},"authorized_pickup":{"first_name":"Juan","middle_name":"Dela","last_name":"Cruz","suffix":"","phone_number":"09987654321","email":"juan.cruz@example.com","relationship_to_beneficiary":"spouse"},"has_pending_cases":false,"pending_cases_details":null}}
{"timestamp":"2025-08-13T02:45:05.540Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:45:05.548Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:45:05.550Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:264:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":2,"purpose_category_id":6,"purpose_details":"Simple test request for barangay clearance - testing basic functionality","payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"has_pending_cases":false}}
{"timestamp":"2025-08-13T02:47:56.492Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T02:48:34.230Z","level":"ERROR","message":"Error in document request submission transaction","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:48:34.233Z","level":"ERROR","message":"Error submitting document request","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null","clientId":34}
{"timestamp":"2025-08-13T02:48:34.234Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:264:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":2,"purpose_category_id":6,"purpose_details":"Simple test request for barangay clearance - testing basic functionality","payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"has_pending_cases":false}}
{"timestamp":"2025-08-13T02:51:19.150Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T02:54:47.318Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T02:55:40.244Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T02:55:42.329Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T03:50:05.040Z","level":"ERROR","message":"Error in document request submission transaction","error":"Authorized pickup validation failed: id_type is required, id_number is required","clientId":34}
{"timestamp":"2025-08-13T03:50:05.044Z","level":"ERROR","message":"Error submitting document request","error":"Authorized pickup validation failed: id_type is required, id_number is required","clientId":34}
{"timestamp":"2025-08-13T03:50:05.046Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:264:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":"agf fdgfdsgdfg ergetg gttdhsgdh sgdhsdgh sgdhgf h","is_third_party_request":false,"requestor_notes":"","beneficiary":null,"authorized_pickup":{"first_name":"Miko","middle_name":"Dela Joma","last_name":"Ford","suffix":"","phone_number":"09965677681","email":"","relationship_to_beneficiary":"relative"},"annual_income":20000,"income_source":"Employment","business_name":"","business_address":"","business_nature":"","has_real_property":false,"property_value":0,"property_location":"","has_personal_property":false,"personal_property_value":0,"has_business":false,"business_gross_receipts":0,"business_type":"","payment_method_id":2,"agree_to_terms":true,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-13T04:26:10.526Z","level":"ERROR","message":"Error in document request submission transaction","error":"Authorized pickup validation failed: id_type is required, id_number is required","clientId":34}
{"timestamp":"2025-08-13T04:26:10.622Z","level":"ERROR","message":"Error submitting document request","error":"Authorized pickup validation failed: id_type is required, id_number is required","clientId":34}
{"timestamp":"2025-08-13T04:26:10.632Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:264:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":"dfgfg trytry verr ryrty rh tyjyuj tujyu teyj tyj tey h th","is_third_party_request":false,"requestor_notes":"","beneficiary":null,"authorized_pickup":{"first_name":"Kristle","middle_name":"Ford","last_name":"Chua","suffix":"","phone_number":"09887055674","email":"","relationship_to_beneficiary":"relative"},"annual_income":20000,"income_source":"Employment","business_name":"","business_address":"","business_nature":"","has_real_property":false,"property_value":0,"property_location":"","has_personal_property":false,"personal_property_value":0,"has_business":false,"business_gross_receipts":0,"business_type":"","payment_method_id":2,"agree_to_terms":true,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-13T06:41:42.868Z","level":"ERROR","message":"Error in document request submission transaction","error":"Authorized pickup validation failed: Invalid phone number format","clientId":34}
{"timestamp":"2025-08-13T06:41:42.872Z","level":"ERROR","message":"Error submitting document request","error":"Authorized pickup validation failed: Invalid phone number format","clientId":34}
{"timestamp":"2025-08-13T06:41:42.874Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:285:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":"ffdgfdfs fsdgfdgf dsfgrtrwg rgtf dsfgfdg fdgsdfgf sfd gfdgs","is_third_party_request":false,"requestor_notes":"","beneficiary":null,"authorized_pickup":{"first_name":"karol","middle_name":"","last_name":"Healer","suffix":"","phone_number":"955987677","email":"","relationship_to_beneficiary":"friend"},"annual_income":20000,"income_source":"Employment","business_name":"","business_address":"","business_nature":"","has_real_property":false,"property_value":0,"property_location":"","has_personal_property":false,"personal_property_value":0,"has_business":false,"business_gross_receipts":0,"business_type":"","payment_method_id":2,"agree_to_terms":true,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-13T07:03:39.988Z","level":"ERROR","message":"Error in document request submission transaction","error":"Authorized pickup validation failed: Invalid phone number format","clientId":34}
{"timestamp":"2025-08-13T07:03:39.991Z","level":"ERROR","message":"Error submitting document request","error":"Authorized pickup validation failed: Invalid phone number format","clientId":34}
{"timestamp":"2025-08-13T07:03:39.993Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:285:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":"sdgfg htrh rtyrtyrtyr t","is_third_party_request":false,"requestor_notes":"","beneficiary":null,"authorized_pickup":{"first_name":"karol","middle_name":"","last_name":"Healer","suffix":"","phone_number":"955987677","email":"","relationship_to_beneficiary":"colleague"},"annual_income":20000,"income_source":"Employment","business_name":"","business_address":"","business_nature":"","has_real_property":false,"property_value":0,"property_location":"","has_personal_property":false,"personal_property_value":0,"has_business":false,"business_gross_receipts":0,"business_type":"","payment_method_id":2,"agree_to_terms":true,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-13T07:14:19.392Z","level":"ERROR","message":"Error in document request submission transaction","error":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`document_requests`, CONSTRAINT `document_requests_ibfk_1` FOREIGN KEY (`client_id`) REFERENCES `client_accounts` (`id`))","clientId":1}
{"timestamp":"2025-08-13T07:14:19.397Z","level":"ERROR","message":"Error submitting document request","error":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`document_requests`, CONSTRAINT `document_requests_ibfk_1` FOREIGN KEY (`client_id`) REFERENCES `client_accounts` (`id`))","clientId":1}
{"timestamp":"2025-08-13T07:15:51.263Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T07:45:35.011Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T07:50:08.772Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Cedula","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-08-13T22:44:15.657Z","level":"ERROR","message":"Error in document request submission transaction","error":"Authorized pickup validation failed: Invalid phone number format","clientId":34}
{"timestamp":"2025-08-13T22:44:15.663Z","level":"ERROR","message":"Error submitting document request","error":"Authorized pickup validation failed: Invalid phone number format","clientId":34}
{"timestamp":"2025-08-13T22:44:15.665Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:285:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":"sdfdg dg fgdfg dfagdfgerteqr dfgdfgasfdg f g","is_third_party_request":false,"requestor_notes":"","beneficiary":null,"authorized_pickup":{"first_name":"John","middle_name":"Mico","last_name":"Doe","suffix":"","phone_number":")9944585867","email":"","relationship_to_beneficiary":"friend"},"annual_income":20000,"income_source":"Employment","business_name":"","business_address":"","business_nature":"","has_real_property":false,"property_value":0,"property_location":"","has_personal_property":false,"personal_property_value":0,"has_business":false,"business_gross_receipts":0,"business_type":"","payment_method_id":2,"agree_to_terms":true,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-14T03:23:00.405Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-08-14T03:23:00.415Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-08-14T03:23:29.767Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password"}
{"timestamp":"2025-08-14T03:23:29.768Z","level":"ERROR","message":"Client login failed","username":"revo4438","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-08-14T03:24:22.317Z","level":"ERROR","message":"Client account registration failed","username":"testuser123","error":"Email already registered"}
{"timestamp":"2025-08-14T03:24:22.319Z","level":"ERROR","message":"Client account registration failed","username":"testuser123","error":"Email already registered","ip":"::1"}
{"timestamp":"2025-08-14T03:26:09.008Z","level":"ERROR","message":"Client login failed","username":"testuser123","error":"Account is pending verification. Please complete your registration."}
{"timestamp":"2025-08-14T03:26:09.013Z","level":"ERROR","message":"Client login failed","username":"testuser123","error":"Account is pending verification. Please complete your registration.","ip":"::1"}
{"timestamp":"2025-08-14T04:18:23.383Z","level":"ERROR","message":"Error in document request submission transaction","error":"Column 'purpose_details' cannot be null","clientId":34}
{"timestamp":"2025-08-14T04:18:23.391Z","level":"ERROR","message":"Error submitting document request","error":"Column 'purpose_details' cannot be null","clientId":34}
{"timestamp":"2025-08-14T04:18:23.393Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:285:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"is_third_party_request":false,"requestor_notes":"","beneficiary":null,"authorized_pickup":null,"annual_income":20000,"income_source":"Employment","business_name":null,"business_address":null,"business_nature":"","has_real_property":null,"property_value":0,"property_location":null,"has_personal_property":false,"personal_property_value":0,"has_business":false,"business_gross_receipts":0,"business_type":null,"payment_method_id":2,"agree_to_terms":true,"monthly_income":null,"property_assessed_value":null,"business_income":null,"occupation":null,"employer_name":null,"employer_address":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-14T04:27:48.043Z","level":"ERROR","message":"Error in document request submission transaction","error":"Column 'purpose_details' cannot be null","clientId":34}
{"timestamp":"2025-08-14T04:27:48.057Z","level":"ERROR","message":"Error submitting document request","error":"Column 'purpose_details' cannot be null","clientId":34}
{"timestamp":"2025-08-14T04:27:48.059Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:285:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":null,"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-08-14T04:28:31.015Z","level":"ERROR","message":"Error in document request submission transaction","error":"Column 'purpose_details' cannot be null","clientId":34}
{"timestamp":"2025-08-14T04:28:31.049Z","level":"ERROR","message":"Error submitting document request","error":"Column 'purpose_details' cannot be null","clientId":34}
{"timestamp":"2025-08-14T04:28:31.052Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:285:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:72:22)","clientId":34,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":{"first_name":"Gemma ","middle_name":null,"last_name":"Ford","suffix":null,"phone_number":"09076788765","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":205,"total_fee":210}}
{"timestamp":"2025-09-01T11:07:46.755Z","level":"ERROR","message":"Client account registration failed","username":"Ashley","error":"Email already registered"}
{"timestamp":"2025-09-01T11:07:46.760Z","level":"ERROR","message":"Client account registration failed","username":"Ashley","error":"Email already registered","ip":"::1"}
{"timestamp":"2025-09-01T13:03:05.606Z","level":"ERROR","message":"Client account registration failed","username":"Ashley","error":"Username already exists"}
{"timestamp":"2025-09-01T13:03:05.613Z","level":"ERROR","message":"Client account registration failed","username":"Ashley","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-09-01T16:24:49.968Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:24:50.056Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:25:08.230Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:25:08.249Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:25:35.173Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:25:35.194Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:28:57.459Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:28:57.666Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:29:12.009Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:29:12.050Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:30:48.589Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:30:48.737Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:31:28.330Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:31:28.393Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:44:05.856Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T16:44:05.947Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:19:33.498Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:19:33.558Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:30:27.022Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:30:42.313Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:31:04.178Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:31:04.213Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:31:19.760Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:31:37.683Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:39:04.633Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:39:07.228Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:40:26.652Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:40:28.395Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:44:30.509Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:44:30.637Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:46:50.846Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:46:50.976Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:46:59.484Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:47:04.651Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:47:19.056Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:47:31.356Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:47:31.430Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:47:35.710Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:47:40.635Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:51:30.145Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:51:30.328Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:51:53.120Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:51:53.205Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:52:09.331Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:52:09.459Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:56:28.587Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:56:28.699Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:56:31.719Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:56:38.563Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:56:58.534Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:56:58.667Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:57:05.153Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:57:08.439Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:819:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","requestId":"156","clientId":34}
{"timestamp":"2025-09-01T17:59:08.119Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T17:59:08.249Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T17:59:11.703Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T17:59:20.518Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:00:05.703Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:00:05.911Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:00:09.863Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:00:13.573Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:04:17.864Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:04:17.991Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:04:21.800Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:04:25.279Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:08:15.729Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:08:16.029Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:08:16.065Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:08:16.242Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-01T18:08:32.405Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"beneficiary","filename":"beneficiary_10_1756738061561.jpg","clientId":34}
{"timestamp":"2025-09-01T18:08:37.083Z","level":"ERROR","message":"Controller error - serveVerificationImage","error":"Cannot read properties of undefined (reading 'getMimeType')","stack":"TypeError: Cannot read properties of undefined (reading 'getMimeType')\n    at serveVerificationImage (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:884:29)","requestId":"156","imageType":"pickup-auth","filename":"pickup_auth_25_1756738061726.png","clientId":34}
{"timestamp":"2025-09-08T02:51:51.969Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:51:51.972Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:51:52.113Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:51:52.114Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:52:51.952Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:52:51.954Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:52:51.977Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:52:51.978Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:53:51.954Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:53:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:53:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:53:51.981Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:54:51.964Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:54:51.966Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:54:51.994Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:54:51.996Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:55:52.184Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:55:52.190Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:55:52.249Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:55:52.251Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:10.493Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:10.495Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:10.602Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:10.604Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:31.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:31.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:31.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:56:31.987Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:05.747Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:05.753Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:05.941Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:05.945Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:51.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:51.986Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:57:51.987Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:58:51.950Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:58:51.952Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:58:51.984Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:58:51.985Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.799Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.800Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.833Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.834Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.855Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.857Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.867Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.868Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.888Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.890Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.897Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.898Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.913Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.915Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.929Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:01.930Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:51.954Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T02:59:51.980Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:00:51.962Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:00:51.963Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:00:51.988Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:00:51.989Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:01:51.952Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:01:51.954Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:01:51.980Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:01:51.982Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:02:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:02:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:02:51.989Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:02:51.991Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:03:51.961Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:03:51.962Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:03:52.000Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:03:52.002Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:04:52.249Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:04:52.251Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:04:52.282Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:04:52.283Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:05:51.989Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:05:51.991Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:05:52.024Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:05:52.026Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:06:51.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:06:51.959Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:06:51.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:06:51.984Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:07:51.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:07:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:07:51.987Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:07:51.988Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:08:51.965Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:08:51.967Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:08:51.990Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:08:51.992Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:09:51.969Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:09:51.971Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:09:51.999Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:09:52.001Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:10:51.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:10:51.958Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:10:51.982Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:10:51.984Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:11:52.208Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:11:52.210Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:11:52.587Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:11:52.589Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:12:51.942Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:12:51.944Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:12:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:12:51.973Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:13:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:13:51.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:13:51.980Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:13:51.981Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:14:51.951Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:14:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:14:51.974Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:14:51.976Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:15:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:15:51.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:15:51.985Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:15:51.986Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:16:51.950Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:16:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:16:51.976Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:16:51.978Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:17:51.960Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:17:51.962Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:17:51.987Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:17:51.989Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:18:51.940Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:18:51.942Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:18:51.963Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:18:51.964Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:19:51.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:19:51.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:19:51.977Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:19:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:20:51.949Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:20:51.951Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:20:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:20:51.981Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:21:51.942Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:21:51.943Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:21:51.964Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:21:51.965Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:22:51.944Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:22:51.945Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:22:51.971Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:22:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:23:51.952Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:23:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:23:51.975Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:23:51.977Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:24:51.945Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:24:51.946Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:24:51.968Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:24:51.969Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:25:51.944Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:25:51.946Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:25:51.976Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:25:51.977Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:26:52.100Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:26:52.101Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:26:52.146Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:26:52.148Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:27:51.948Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:27:51.950Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:27:51.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:27:51.985Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:28:51.946Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:28:51.947Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:28:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:28:51.974Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:29:51.947Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:29:51.948Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:29:51.978Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:29:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:30:51.948Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:30:51.949Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:30:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:30:51.974Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:31:51.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:31:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:31:51.978Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:31:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:32:51.944Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:32:51.945Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:32:51.973Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:32:51.975Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:33:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:33:51.954Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:33:51.975Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:33:51.976Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:34:51.949Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:34:51.950Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:34:51.971Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:34:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:35:51.942Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:35:51.944Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:35:51.967Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:35:51.968Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:36:51.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:36:51.956Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:36:51.977Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:36:51.978Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:37:51.960Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:37:51.962Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:37:51.989Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:37:51.990Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.509Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.511Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.533Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.535Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.553Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.554Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.565Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.568Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.590Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.591Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.603Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.604Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.654Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.655Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.671Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:01.672Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:51.952Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:51.953Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:51.977Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:38:51.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:39:51.943Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:39:51.945Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:39:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:39:51.974Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:40:51.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:40:51.958Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:40:51.981Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:40:51.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:41:52.183Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:41:52.202Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:41:52.926Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:41:52.928Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:42:51.949Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:42:51.950Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:42:51.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:42:51.973Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:43:51.958Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:43:51.960Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:43:51.982Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:43:51.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:44:51.973Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:44:51.975Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:44:52.021Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:44:52.029Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:45:51.966Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:45:51.967Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:45:51.995Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:45:51.996Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:46:52.494Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:46:52.496Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:46:55.331Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:46:55.332Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:47:51.947Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:47:51.948Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:47:51.988Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:47:51.990Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.428Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.434Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.591Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.594Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.652Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.657Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.709Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:50.711Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:52.042Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:52.044Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:52.058Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:48:52.059Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:07.136Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:07.140Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:07.181Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:07.182Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:20.993Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:20.996Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:21.033Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:21.035Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:37.979Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:37.980Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:38.011Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:38.012Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:50.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:50.960Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:50.984Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:49:50.985Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:07.964Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:07.965Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:07.990Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:07.992Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:20.960Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:20.961Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:20.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:20.984Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:37.967Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:37.969Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:37.997Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:37.999Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:50.945Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:50.947Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:50.970Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:50:50.972Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:07.946Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:07.948Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:07.974Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:07.976Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:20.960Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:20.961Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:20.985Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:20.987Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:37.949Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:37.951Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:37.976Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:37.978Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:51.116Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:51.119Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:51.174Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:51:51.176Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:07.946Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:07.948Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:07.987Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:07.988Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:20.955Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:20.957Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:20.979Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:20.980Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:51.961Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:51.963Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:51.987Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:51.989Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:52.007Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:52.008Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:52.023Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:52:52.024Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.612Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.615Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.632Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.634Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.659Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.661Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.666Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.668Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.688Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.690Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.695Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.697Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.718Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.720Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.725Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.727Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.750Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.752Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.757Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.758Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.777Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.779Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.784Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.785Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.811Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.812Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.816Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.818Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.832Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.833Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.847Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:10.848Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.947Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.949Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.971Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.972Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.982Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.983Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.995Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:53:51.996Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.037Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.040Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.062Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.063Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.195Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.197Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.217Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:43.218Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:45.232Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:45.235Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:45.253Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:45.255Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:49.846Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:49.848Z","level":"ERROR","message":"Unknown column 'dr.base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT\n          dr.id,\n          dr.request_number,\n          dr.client_id,\n          dr.is_third_party_request,\n          CONCAT(cp.first_name, ' ', cp.last_name) as client_name,\n          cp.email as client_email,\n          cp.phone_number as client_phone,\n          cp.birth_date as client_birth_date,\n          cp.gender as client_gender,\n          cp.civil_status_id as client_civil_status_id,\n          cs.status_name as client_civil_status,\n          cp.nationality as client_nationality,\n          cp.years_of_residency as client_years_of_residency,\n          cp.months_of_residency as client_months_of_residency,\n          dt.type_name as document_type,\n          pc.category_name as purpose_category,\n          dr.purpose_details,\n          rs.status_name,\n          rs.description as status_description,\n          dr.priority,\n          dr.base_fee,\n          dr.additional_fees,\n          dr.processing_fee,\n          (dr.base_fee + dr.additional_fees + dr.processing_fee) as total_fee,\n          dr.payment_status,\n          pm.method_name as payment_method,\n          dr.delivery_method,\n          dr.requested_at,\n          dr.processed_at,\n          dr.approved_at,\n          COALESCE(\n            CONCAT(processed_aep.first_name, ' ', processed_aep.last_name),\n            NULL\n          ) as processed_by_name,\n          COALESCE(\n            CONCAT(approved_aep.first_name, ' ', approved_aep.last_name),\n            NULL\n          ) as approved_by_name,\n          -- Beneficiary information for third-party requests\n          CASE\n            WHEN dr.is_third_party_request = TRUE THEN\n              CONCAT(db.first_name, ' ',\n                     COALESCE(CONCAT(db.middle_name, ' '), ''),\n                     db.last_name,\n                     COALESCE(CONCAT(' ', db.suffix), ''))\n            ELSE NULL\n          END as beneficiary_name,\n          db.id as beneficiary_id,\n          db.relationship_to_requestor as beneficiary_relationship,\n          db.verification_status as beneficiary_verification_status,\n          db.verification_image_path as beneficiary_verification_image,\n          -- Authorized pickup information\n          CASE\n            WHEN app.id IS NOT NULL THEN\n              CONCAT(app.first_name, ' ',\n                     COALESCE(CONCAT(app.middle_name, ' '), ''),\n                     app.last_name,\n                     COALESCE(CONCAT(' ', app.suffix), ''))\n            ELSE NULL\n          END as pickup_person_name,\n          app.relationship_to_beneficiary as pickup_relationship,\n          app.is_verified as pickup_verified,\n          app.id_image_path as pickup_id_image,\n          app.authorization_letter_path as pickup_authorization_letter\n        FROM document_requests dr\n        JOIN document_types dt ON dr.document_type_id = dt.id\n        JOIN purpose_categories pc ON dr.purpose_category_id = pc.id\n        JOIN request_status rs ON dr.status_id = rs.id\n        LEFT JOIN payment_methods pm ON dr.payment_method_id = pm.id\n        LEFT JOIN client_accounts ca ON dr.client_id = ca.id\n        LEFT JOIN client_profiles cp ON ca.id = cp.account_id\n        LEFT JOIN civil_status cs ON cp.civil_status_id = cs.id\n        LEFT JOIN admin_employee_accounts processed_aea ON dr.processed_by = processed_aea.id\n        LEFT JOIN admin_employee_profiles processed_aep ON processed_aea.id = processed_aep.account_id\n        LEFT JOIN admin_employee_accounts approved_aea ON dr.approved_by = approved_aea.id\n        LEFT JOIN admin_employee_profiles approved_aep ON approved_aea.id = approved_aep.account_id\n        LEFT JOIN document_beneficiaries db ON dr.id = db.request_id\n        LEFT JOIN authorized_pickup_persons app ON dr.id = app.request_id\n        \n        ORDER BY dr.requested_at DESC\n        LIMIT ? OFFSET ?\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'dr.base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:49.871Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T03:54:49.872Z","level":"ERROR","message":"Unknown column 'base_fee' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        SELECT \n          COUNT(*) as total_requests,\n          COUNT(CASE WHEN status_id = 1 THEN 1 END) as pending_requests,\n          COUNT(CASE WHEN status_id = 2 THEN 1 END) as under_review_requests,\n          COUNT(CASE WHEN status_id = 4 THEN 1 END) as approved_requests,\n          COUNT(CASE WHEN status_id = 5 THEN 1 END) as processing_requests,\n          COUNT(CASE WHEN status_id = 6 THEN 1 END) as ready_for_pickup_requests,\n          COUNT(CASE WHEN status_id = 7 THEN 1 END) as completed_requests,\n          COUNT(CASE WHEN status_id = 9 THEN 1 END) as rejected_requests,\n          COUNT(CASE WHEN DATE(requested_at) = CURDATE() THEN 1 END) as today_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) THEN 1 END) as week_requests,\n          COUNT(CASE WHEN DATE(requested_at) >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) THEN 1 END) as month_requests,\n          SUM(base_fee + additional_fees + processing_fee) as total_revenue,\n          SUM(CASE WHEN payment_status = 'paid' THEN base_fee + additional_fees + processing_fee ELSE 0 END) as paid_revenue,\n          COUNT(CASE WHEN priority = 'urgent' THEN 1 END) as urgent_requests\n        FROM document_requests\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'base_fee' in 'field list'"}
{"timestamp":"2025-09-08T04:24:33.482Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":162,"payment_method_id":2},"userId":34}
{"timestamp":"2025-09-08T04:24:52.293Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":162,"payment_method_id":2},"userId":34}
{"timestamp":"2025-09-08T04:39:00.145Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":162,"payment_method_id":2},"userId":34}
{"timestamp":"2025-09-08T04:39:11.328Z","level":"ERROR","message":"Payment link creation failed","error":"PayMongo payment link creation failed: Request failed with status code 400","stack":"Error: PayMongo payment link creation failed: Request failed with status code 400\n    at PayMongoService.createPaymentLink (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\paymongoService.js:83:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async PaymentController.initiatePayment (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\paymentController.js:172:27)","body":{"request_id":162,"payment_method_id":2},"userId":34}
{"timestamp":"2025-09-13T03:01:58.992Z","level":"ERROR","message":"Error retrieving request details","error":"Request not found","requestId":178,"clientId":34}
{"timestamp":"2025-09-13T03:01:58.998Z","level":"ERROR","message":"Controller error - getRequestDetails","error":"Request not found","stack":"Error: Request not found\n    at DocumentRequestService.getRequestDetails (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:499:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async getRequestDetails (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:139:22)","requestId":"178","clientId":34}
{"timestamp":"2025-09-13T05:12:55.954Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-13T05:12:55.957Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-13T16:15:05.186Z","level":"ERROR","message":"Client login failed","username":"test_client_comprehensive","error":"Invalid username or password"}
{"timestamp":"2025-09-13T16:15:05.217Z","level":"ERROR","message":"Client login failed","username":"test_client_comprehensive","error":"Invalid username or password","ip":"::1"}
{"timestamp":"2025-09-16T03:56:22.637Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Table 'barangay_management_system.client_accounts' doesn't exist"}
{"timestamp":"2025-09-16T03:56:22.646Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Table 'barangay_management_system.client_accounts' doesn't exist","ip":"::1"}
{"timestamp":"2025-09-16T03:56:37.508Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Table 'barangay_management_system.client_accounts' doesn't exist"}
{"timestamp":"2025-09-16T03:56:37.514Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Table 'barangay_management_system.client_accounts' doesn't exist","ip":"::1"}
{"timestamp":"2025-09-16T04:10:02.794Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Cannot read properties of undefined (reading 'id')","ip":"::1"}
{"timestamp":"2025-09-16T04:10:19.442Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Username already exists"}
{"timestamp":"2025-09-16T04:10:19.446Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Username already exists","ip":"::1"}
{"timestamp":"2025-09-16T04:29:53.047Z","level":"ERROR","message":"Client account registration failed","username":"floy144","error":"Cannot read properties of undefined (reading 'id')","ip":"::1"}
{"timestamp":"2025-09-16T04:30:42.894Z","level":"ERROR","message":"Client account registration failed","username":"floy1414","error":"Cannot read properties of undefined (reading 'id')","ip":"::1"}
{"timestamp":"2025-09-16T04:34:00.969Z","level":"ERROR","message":"Client account registration failed","username":"floy1414","error":"Cannot read properties of undefined (reading 'id')","ip":"::1"}
{"timestamp":"2025-09-16T04:40:10.319Z","level":"ERROR","message":"Client account registration failed","username":"floy1414","error":"Cannot read properties of undefined (reading 'id')","ip":"::1"}
{"timestamp":"2025-09-16T04:42:05.204Z","level":"ERROR","message":"Client account registration failed","username":"testuser_1757997724084","error":"Cannot read properties of undefined (reading 'id')","ip":"::1"}
{"timestamp":"2025-09-16T09:22:51.062Z","level":"ERROR","message":"Error in document request submission transaction","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T09:22:51.071Z","level":"ERROR","message":"Error submitting document request","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T09:22:51.085Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:284:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":49,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":null,"has_pending_cases":false,"pending_cases_details":null,"cedula_number":null,"cedula_date_issued":null,"cedula_place_issued":null,"voter_registration_number":null,"precinct_number":null,"emergency_contact_name":null,"emergency_contact_relationship":null,"emergency_contact_phone":null,"emergency_contact_address":null,"total_fee":150,"total_document_fee":150}}
{"timestamp":"2025-09-16T09:37:08.971Z","level":"ERROR","message":"Error in document request submission transaction","error":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`document_requests`, CONSTRAINT `document_requests_ibfk_1` FOREIGN KEY (`client_id`) REFERENCES `client_accounts` (`id`))","clientId":1}
{"timestamp":"2025-09-16T09:37:08.976Z","level":"ERROR","message":"Error submitting document request","error":"Cannot add or update a child row: a foreign key constraint fails (`barangay_management_system`.`document_requests`, CONSTRAINT `document_requests_ibfk_1` FOREIGN KEY (`client_id`) REFERENCES `client_accounts` (`id`))","clientId":1}
{"timestamp":"2025-09-16T09:37:50.367Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:37:50.529Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:37:50.551Z","level":"ERROR","message":"Error in document request submission transaction","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":12}
{"timestamp":"2025-09-16T09:37:50.557Z","level":"ERROR","message":"Error submitting document request","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":12}
{"timestamp":"2025-09-16T09:40:01.019Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:40:01.339Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:50:19.400Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:50:19.721Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:50:26.433Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:50:26.909Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T09:57:07.032Z","level":"ERROR","message":"Error in document request submission transaction","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T09:57:07.036Z","level":"ERROR","message":"Error submitting document request","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T09:57:07.038Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:284:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":49,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":null,"has_pending_cases":true,"pending_cases_details":"Test pending cases","cedula_number":null,"cedula_date_issued":null,"cedula_place_issued":null,"total_fee":150,"total_document_fee":150}}
{"timestamp":"2025-09-16T10:06:11.718Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:06:12.081Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:08:26.969Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:08:27.323Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:16:15.015Z","level":"ERROR","message":"Error in document request submission transaction","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T10:16:15.021Z","level":"ERROR","message":"Error submitting document request","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T10:16:15.024Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:284:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":49,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":null,"has_pending_cases":true,"pending_cases_details":"Test pending cases","cedula_number":null,"cedula_date_issued":null,"cedula_place_issued":null,"total_fee":150,"total_document_fee":150}}
{"timestamp":"2025-09-16T10:28:13.131Z","level":"ERROR","message":"Error in document request submission transaction","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T10:28:13.332Z","level":"ERROR","message":"Error submitting document request","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T10:28:14.300Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:284:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":49,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":null,"has_pending_cases":false,"pending_cases_details":null,"cedula_number":null,"cedula_date_issued":null,"cedula_place_issued":null,"total_fee":150,"total_document_fee":150}}
{"timestamp":"2025-09-16T10:30:28.168Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:30:28.180Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:30:29.899Z","level":"ERROR","message":"Failed to send email:","to":"2034_cete_fordmark@online.htcgsc.edu.ph","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:30:29.938Z","level":"ERROR","message":"Failed to send email:","to":"adminaccount@gmail.com","subject":"New Document Request - Barangay Clearance","error":"Missing credentials for \"PLAIN\""}
{"timestamp":"2025-09-16T10:34:24.478Z","level":"ERROR","message":"Error in document request submission transaction","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T10:34:24.486Z","level":"ERROR","message":"Error submitting document request","error":"Unknown column 'voter_registration_number' in 'field list'","clientId":49}
{"timestamp":"2025-09-16T10:34:24.492Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:284:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":49,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":false,"requestor_notes":null,"beneficiary":null,"authorized_pickup":null,"has_pending_cases":false,"pending_cases_details":null,"voter_registration_status":true,"cedula_number":null,"cedula_date_issued":null,"cedula_place_issued":null,"total_fee":150,"total_document_fee":150}}
{"timestamp":"2025-09-16T12:01:38.479Z","level":"ERROR","message":"Failed to send email:","to":"torukamiya1@gmail.com","subject":"Your OTP Code - Barangay Management System","error":"Connection closed unexpectedly"}
{"timestamp":"2025-09-16T12:01:38.489Z","level":"ERROR","message":"Failed to send OTP email:","email":"torukamiya1@gmail.com","error":"Connection closed unexpectedly"}
{"timestamp":"2025-09-16T12:01:38.491Z","level":"ERROR","message":"Failed to generate and send OTP:","email":"torukamiya1@gmail.com","purpose":"email_verification","error":"Connection closed unexpectedly"}
{"timestamp":"2025-09-16T12:15:46.488Z","level":"ERROR","message":"Client profile creation failed","accountId":"53","error":"Profile already exists for this account"}
{"timestamp":"2025-09-16T12:15:46.494Z","level":"ERROR","message":"Client registration completion failed","accountId":"53","error":"Profile already exists for this account","ip":"::1"}
{"timestamp":"2025-09-16T12:19:14.117Z","level":"ERROR","message":"Client profile creation failed","accountId":"54","error":"Profile already exists for this account"}
{"timestamp":"2025-09-16T12:19:14.139Z","level":"ERROR","message":"Client registration completion failed","accountId":"54","error":"Profile already exists for this account","ip":"::1"}
{"timestamp":"2025-09-16T13:46:42.808Z","level":"ERROR","message":"Error in document request submission transaction","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:46:42.811Z","level":"ERROR","message":"Error submitting document request","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:46:42.812Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:279:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":58,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Al Khayr","middle_name":"Tiboron","last_name":"Abdilah","suffix":null,"birth_date":"2016-01-26","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"06534280428","email":"rhaijanaabdilah@gmail.com","house_number":"blk 19 lot 17-20","street":"mangga","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":null,"annual_income":30000,"monthly_income":0,"property_assessed_value":20000,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":"blk 19 lot 18-20 street mangga","tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":true,"has_personal_property":true,"personal_property_value":10000,"computed_tax":65,"total_fee":100,"total_document_fee":100}}
{"timestamp":"2025-09-16T13:48:22.133Z","level":"ERROR","message":"Error in document request submission transaction","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:48:22.135Z","level":"ERROR","message":"Error submitting document request","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:48:22.137Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:279:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":58,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Al Khayr","middle_name":"Tiboron","last_name":"Abdilah","suffix":null,"birth_date":"2016-01-26","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"06534280428","email":"rhaijanaabdilah@gmail.com","house_number":"blk 19 lot 17-20","street":"mangga","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":null,"annual_income":30000,"monthly_income":0,"property_assessed_value":20000,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":"blk 19 lot 18-20 street mangga","tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":true,"has_personal_property":true,"personal_property_value":10000,"computed_tax":65,"total_fee":100,"total_document_fee":100}}
{"timestamp":"2025-09-16T13:53:15.316Z","level":"ERROR","message":"Error in document request submission transaction","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:53:15.317Z","level":"ERROR","message":"Error submitting document request","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:53:15.317Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:279:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":58,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Al Khayr","middle_name":"Tiboron","last_name":"Abdilah","suffix":null,"birth_date":"2016-01-26","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"06534280428","email":"rhaijanaabdilah@gmail.com","house_number":"blk 19 lot 17-20","street":"mangga","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":null,"annual_income":30000,"monthly_income":0,"property_assessed_value":20000,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":"blk 19 lot 18-20 street mangga","tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":true,"has_personal_property":true,"personal_property_value":10000,"computed_tax":65,"total_fee":100,"total_document_fee":100}}
{"timestamp":"2025-09-16T13:54:23.892Z","level":"ERROR","message":"Error in document request submission transaction","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:54:23.893Z","level":"ERROR","message":"Error submitting document request","error":"Beneficiary validation failed: Invalid phone number format (must be 09XXXXXXXXX - 11 digits starting with 09)","clientId":58}
{"timestamp":"2025-09-16T13:54:23.894Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to submit document request","stack":"Error: Failed to submit document request\n    at DocumentRequestService.submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\services\\documentRequestService.js:279:13)\n    at process.processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at async submitRequest (D:\\sept16_cap2_rhai_front_and_back\\cap2_rhai_front_and_back\\rhai_backend\\src\\controllers\\documentRequestController.js:78:22)","clientId":58,"requestData":{"document_type_id":1,"purpose_category_id":3,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Al Khayr","middle_name":"Tiboron","last_name":"Abdilah","suffix":null,"birth_date":"2016-01-26","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"06534280428","email":"rhaijanaabdilah@gmail.com","house_number":"blk 19 lot 17-20","street":"mangga","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":null,"annual_income":30000,"monthly_income":0,"property_assessed_value":20000,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":"blk 19 lot 18-20 street mangga","tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":true,"has_personal_property":true,"personal_property_value":10000,"computed_tax":65,"total_fee":100,"total_document_fee":100}}
{"timestamp":"2025-09-16T16:03:39.882Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-09-16T16:03:40.052Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-09-17T12:25:19.157Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:25:34.102Z","level":"ERROR","message":"Failed to get client receipt statistics","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:25:55.151Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:31:52.606Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:32:07.603Z","level":"ERROR","message":"Failed to get client receipt statistics","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:32:29.602Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:32:46.523Z","level":"ERROR","message":"Failed to get client receipt statistics","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:35:34.349Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:35:48.749Z","level":"ERROR","message":"Failed to get client receipt statistics","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:48:54.526Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:49:09.352Z","level":"ERROR","message":"Failed to get client receipt statistics","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:49:17.549Z","level":"ERROR","message":"Failed to get client receipts","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T12:49:32.577Z","level":"ERROR","message":"Failed to get client receipt statistics","clientId":59,"error":"ApiResponse.success is not a function"}
{"timestamp":"2025-09-17T15:58:50.912Z","level":"ERROR","message":"Failed to send residency approval SMS","accountId":60,"error":"executeQuery is not defined"}
{"timestamp":"2025-09-17T16:35:30.036Z","level":"ERROR","message":"Failed to cleanup expired SMS OTPs:","phoneNumber":"+639526574063","purpose":"registration","error":"Unknown column 'phone_number' in 'where clause'"}
{"timestamp":"2025-09-17T16:35:30.042Z","level":"ERROR","message":"Failed to generate and send SMS OTP:","phoneNumber":"+639526574063","purpose":"registration","error":"Unknown column 'phone_number' in 'field list'"}
{"timestamp":"2025-09-17T16:35:30.043Z","level":"ERROR","message":"Failed to send SMS OTP:","phoneNumber":"+639526574063","purpose":"registration","error":"Unknown column 'phone_number' in 'field list'","ip":"::1"}
{"timestamp":"2025-09-17T16:42:36.209Z","level":"ERROR","message":"OTP verification failed:","identifier":"+639526574063","deliveryMethod":"sms","purpose":"registration","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-17T16:42:36.224Z","level":"ERROR","message":"Failed to verify SMS OTP:","phoneNumber":"+639526574063","purpose":"registration","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-09-17T16:47:11.437Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:47:11.440Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:47:51.643Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:47:51.645Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:48:08.241Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:48:08.242Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:48:48.888Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:48:48.891Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:48:59.085Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:48:59.087Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:51:03.802Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:51:03.807Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:51:14.619Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T16:51:14.621Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-17T17:08:34.553Z","level":"ERROR","message":"Your verification code is: 652326. This code will expire in 10 minutes. Do not share this code with anyone.","recipients":"09068295558","error":"timeout of 10000ms exceeded"}
{"timestamp":"2025-09-17T17:15:30.437Z","level":"ERROR","message":"Hi Kris Barbosa, your Cedula request #CED-2025-000002 is ready for pickup!","recipients":"09955958358","error":"timeout of 10000ms exceeded"}
{"timestamp":"2025-09-17T18:26:19.455Z","level":"ERROR","message":"Client profile creation failed","accountId":"61","error":"Profile already exists for this account"}
{"timestamp":"2025-09-17T18:26:19.473Z","level":"ERROR","message":"Client registration completion failed","accountId":"61","error":"Profile already exists for this account","ip":"::1"}
{"timestamp":"2025-09-17T18:26:44.959Z","level":"ERROR","message":"Client profile creation failed","accountId":"61","error":"Account not found"}
{"timestamp":"2025-09-17T18:26:44.962Z","level":"ERROR","message":"Client registration completion failed","accountId":"61","error":"Account not found","ip":"::1"}
{"timestamp":"2025-09-17T18:59:21.454Z","level":"ERROR","message":"Barangay Bula Document Hub: Your verification code is 951071. It expires in 10 minutes. Do not share this code.","recipients":"09955958358","error":"timeout of 10000ms exceeded"}
{"timestamp":"2025-09-17T19:50:42.250Z","level":"ERROR","message":"OTP verification failed:","identifier":"gemmaford605@gmail.com","deliveryMethod":"email","purpose":"email_verification","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-17T19:50:42.257Z","level":"ERROR","message":"Email verification failed","email":"gemmaford605@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-17T19:50:42.262Z","level":"ERROR","message":"Client email verification failed","email":"gemmaford605@gmail.com","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-09-19T01:49:02.165Z","level":"ERROR","message":"Failed to retrieve client data for approval notification","accountId":69,"error":"executeQuery is not defined"}
{"timestamp":"2025-09-29T16:33:46.291Z","level":"ERROR","message":"Barangay Bula Document Hub: Success, Rhaijana Abdilah! Payment for Cedula request #CED-2025-000001 is confirmed.","recipients":"09526574063","error":"timeout of 10000ms exceeded"}
{"timestamp":"2025-09-30T03:56:45.231Z","level":"ERROR","message":"OTP verification failed:","identifier":"torukamiya1@gmail.com","deliveryMethod":"email","purpose":"email_verification","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T03:56:45.240Z","level":"ERROR","message":"Email verification failed","email":"torukamiya1@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T03:56:45.242Z","level":"ERROR","message":"Client email verification failed","email":"torukamiya1@gmail.com","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-09-30T04:04:13.274Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-30T04:04:13.280Z","level":"ERROR","message":"Update request status error:"}
{"timestamp":"2025-09-30T04:09:32.618Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-09-30T04:09:32.751Z","level":"ERROR","message":"Signature verification error:","code":"ERR_INVALID_ARG_TYPE"}
{"timestamp":"2025-09-30T10:22:10.104Z","level":"ERROR","message":"OTP verification failed:","identifier":"torukamiya1@gmail.com","deliveryMethod":"email","purpose":"email_verification","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T10:22:10.117Z","level":"ERROR","message":"Email verification failed","email":"torukamiya1@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T10:22:10.118Z","level":"ERROR","message":"Client email verification failed","email":"torukamiya1@gmail.com","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-09-30T10:47:27.436Z","level":"ERROR","message":"Client account registration failed","username":"kloykloy22","error":"Email already registered"}
{"timestamp":"2025-09-30T10:47:27.446Z","level":"ERROR","message":"Client account registration failed","username":"kloykloy22","error":"Email already registered","ip":"::1"}
{"timestamp":"2025-09-30T10:56:20.086Z","level":"ERROR","message":"OTP verification failed:","identifier":"torukamiya1@gmail.com","deliveryMethod":"email","purpose":"email_verification","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T10:56:20.092Z","level":"ERROR","message":"Email verification failed","email":"torukamiya1@gmail.com","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T10:56:20.097Z","level":"ERROR","message":"Client email verification failed","email":"torukamiya1@gmail.com","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-09-30T10:56:20.167Z","level":"ERROR","message":"OTP verification failed:","identifier":"09955958358","deliveryMethod":"sms","purpose":"email_verification","error":"Invalid or expired OTP"}
{"timestamp":"2025-09-30T10:56:20.169Z","level":"ERROR","message":"Failed to verify SMS OTP:","phoneNumber":"09955958358","purpose":"email_verification","error":"Invalid or expired OTP","ip":"::1"}
{"timestamp":"2025-10-01T15:27:31.331Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:31.333Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:34.086Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:34.087Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:36.174Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:36.175Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:37.387Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:37.391Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:39.078Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:39.080Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:40.774Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:40.775Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:41.957Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:41.960Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:51.467Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:51.470Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:53.017Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:27:53.021Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:35.862Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:35.864Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:37.113Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:37.115Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:38.503Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:38.505Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:39.731Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:39.735Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:40.700Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:40.708Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:56.808Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:28:56.809Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:04.821Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:29:04.822Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:29:14.338Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:14.341Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:26.039Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:29:26.040Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:29:27.887Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:29:27.888Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:29:31.376Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:31.377Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:32.947Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:32.949Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:33.919Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:33.928Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:38.922Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:38.925Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:40.537Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:29:40.539Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:33.899Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:33.901Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:37.313Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:37.314Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:39.804Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:39.805Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:40.936Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:30:40.938Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:31:05.515Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:31:05.520Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:31:18.480Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:31:18.482Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:26.110Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'client' AND user_id = ? AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:26.112Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'client' AND user_id = ? AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:29.214Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:29.215Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:33.448Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:33.452Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:34.022Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:34.023Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:34.221Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:34.222Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:43.684Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:43.685Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:57.610Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:32:57.616Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:01.588Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:01.594Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:10.595Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:10.597Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:11.718Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:11.719Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:13.767Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:13.768Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:15.189Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:15.190Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:15.930Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:33:15.933Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:35:19.380Z","level":"ERROR","message":"Barangay Bula Document Hub: Your verification code is 693657. It expires in 10 minutes. Do not share this code.","recipients":"09955958358","error":"timeout of 10000ms exceeded"}
{"timestamp":"2025-10-01T15:36:39.069Z","level":"ERROR","message":"Unknown column 'user_id' in 'field list'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n        INSERT INTO notifications (\n          user_id, user_type, type, title, message, data, priority, created_at\n        ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())\n      ","sqlState":"42S22","sqlMessage":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:36:39.072Z","level":"ERROR","message":"Failed to send new client registration notification","accountId":80,"error":"Unknown column 'user_id' in 'field list'"}
{"timestamp":"2025-10-01T15:36:44.404Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'client' AND user_id = ? AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:36:44.405Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'client' AND user_id = ? AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:36:50.562Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:36:50.588Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:36:50.682Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:36:50.683Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'client' AND user_id = ?\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:10.163Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:10.173Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:11.568Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:11.575Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:13.576Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:13.579Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:32.109Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:38:32.130Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:07.263Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:07.265Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:16.535Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:16.539Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:20.289Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:20.293Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:23.503Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:39:23.505Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:41:40.100Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:41:40.105Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:41:50.949Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:41:50.957Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:43:14.217Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:43:14.232Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:04.560Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:04.562Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:08.245Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:08.246Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:10.664Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:10.666Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:12.217Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:44:12.219Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:45:49.836Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:45:49.870Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:45:50.840Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:45:50.843Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:45:53.612Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:45:53.613Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:54:24.778Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:54:24.780Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:05.836Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:05.845Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:06.131Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:06.135Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:08.018Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:08.023Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:14.872Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:14.878Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT COUNT(*) as count FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?) AND is_read = FALSE\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:15.946Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:15.947Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:18.454Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:18.455Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:43.338Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T15:57:43.349Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T16:28:12.922Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T16:28:12.924Z","level":"ERROR","message":"Unknown column 'user_type' in 'where clause'","code":"ER_BAD_FIELD_ERROR","errno":1054,"sql":"\n          SELECT * FROM notifications\n          WHERE user_type = 'admin' AND (user_id IS NULL OR user_id = ?)\n          \n          ORDER BY created_at DESC\n          LIMIT ? OFFSET ?\n        ","sqlState":"42S22","sqlMessage":"Unknown column 'user_type' in 'where clause'"}
{"timestamp":"2025-10-01T18:01:42.410Z","level":"ERROR","message":"Barangay Bula Document Hub: Great news, George Grandia! Your Cedula request #CED-2025-000005 is approved! Watch for our next update.","recipients":"09955958358","error":"timeout of 10000ms exceeded"}
{"timestamp":"2025-10-20T13:49:59.879Z","level":"ERROR","message":"Failed to send rejection notifications","documentId":46,"accountId":80,"error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T14:08:29.847Z","level":"ERROR","message":"Failed to send rejection notifications","documentId":46,"accountId":80,"error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T14:09:21.041Z","level":"ERROR","message":"Failed to send rejection notifications","documentId":46,"accountId":80,"error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T14:36:35.191Z","level":"ERROR","message":"Failed to send rejection notifications","documentId":46,"accountId":80,"error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T14:44:51.610Z","level":"ERROR","message":"Failed to send rejection notifications","documentId":46,"accountId":80,"error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T14:50:31.472Z","level":"ERROR","message":"Failed to send rejection notifications","documentId":46,"accountId":80,"error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T15:00:37.164Z","level":"ERROR","message":"Failed to send document status notifications","documentId":46,"accountId":80,"status":"rejected","error":"Unknown column 'ca.email' in 'field list'"}
{"timestamp":"2025-10-20T15:08:01.501Z","level":"ERROR","message":"Failed to send email:","to":{"to":"gemmaford605@gmail.com","subject":"Document Rejected - Action Required","html":"\n                      <h2>Document Rejected</h2>\n                      <p>Dear Jasmin Lantara,</p>\n                      <p>Your Valid ID was rejected.</p>\n                      <p>Please log in to your account and reupload the document.</p>\n                      <p><a href=\"http://localhost:8081/client/rejected-documents\">Click here to reupload</a></p>\n                      <p>Thank you,<br>Barangay Bula Document Hub</p>\n                    "},"error":"Cannot read properties of undefined (reading 'replace')"}
{"timestamp":"2025-10-20T15:08:01.510Z","level":"ERROR","message":"Failed to send document rejection email","documentId":46,"accountId":80,"error":"Cannot read properties of undefined (reading 'replace')"}
{"timestamp":"2025-10-20T15:11:36.145Z","level":"ERROR","message":"Failed to send email:","to":{"to":"gemmaford605@gmail.com","subject":"Document Rejected - Action Required","html":"\n                      <h2>Document Rejected</h2>\n                      <p>Dear Jasmin Lantara,</p>\n                      <p>Your Valid ID was rejected.</p>\n                      <p>Please log in to your account and reupload the document.</p>\n                      <p><a href=\"http://localhost:8081/client/rejected-documents\">Click here to reupload</a></p>\n                      <p>Thank you,<br>Barangay Bula Document Hub</p>\n                    "},"error":"Cannot read properties of undefined (reading 'replace')"}
{"timestamp":"2025-10-20T15:11:36.148Z","level":"ERROR","message":"Failed to send document rejection email","documentId":46,"accountId":80,"error":"Cannot read properties of undefined (reading 'replace')"}
{"timestamp":"2025-10-20T19:43:39.258Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:43:40.305Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:43:42.332Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:43:46.367Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:52:44.635Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:52:45.678Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:52:47.714Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:52:51.755Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:54:30.994Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:54:32.035Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:54:34.068Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T19:54:38.105Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:01:09.883Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:01:11.161Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:01:13.192Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:01:17.225Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:05:25.050Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:05:26.091Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:05:28.130Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:05:32.169Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:12:37.060Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:12:38.129Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:12:40.160Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:12:44.202Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:20:16.562Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:20:17.624Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:20:19.656Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:20:23.694Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:27:27.539Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:27:28.616Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:27:30.662Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:27:35.303Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:34:49.795Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:34:50.870Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:34:52.897Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-20T20:34:57.298Z","level":"ERROR","message":"Failed to send beneficiary verification notifications","beneficiaryId":22,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:26:46.029Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:26:47.076Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:26:49.100Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:26:53.140Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:33:04.765Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:33:05.839Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:33:07.870Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:33:11.900Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:35:55.857Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:35:55.861Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:35:56.897Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:35:56.898Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:35:58.924Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:35:58.926Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:36:03.298Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:36:03.300Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:35.121Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:35.124Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:36.160Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:36.161Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:38.193Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:38.195Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:42.228Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:43:42.230Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T09:48:36.605Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:36.609Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:37.719Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:37.724Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:40.116Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:40.118Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:44.157Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T09:48:44.158Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.account_id' in 'field list'"}
{"timestamp":"2025-10-21T11:18:06.067Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:06.071Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:07.104Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:07.106Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:09.135Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:09.137Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:13.288Z","level":"ERROR","message":"Error updating pickup person verification status","pickupId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T11:18:13.290Z","level":"ERROR","message":"Failed to update pickup person verification status","pickupId":"32","adminId":32,"error":"Unknown column 'dr.document_type' in 'field list'"}
{"timestamp":"2025-10-21T18:05:52.465Z","level":"ERROR","message":"Error reuploading authorization document","documentId":18,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:52.467Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"18","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:53.516Z","level":"ERROR","message":"Error reuploading authorization document","documentId":18,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:53.517Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"18","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:55.566Z","level":"ERROR","message":"Error reuploading authorization document","documentId":18,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:55.567Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"18","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:59.625Z","level":"ERROR","message":"Error reuploading authorization document","documentId":18,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:05:59.626Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"18","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:20.369Z","level":"ERROR","message":"Error reuploading authorization document","documentId":14,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:20.370Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"14","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:21.466Z","level":"ERROR","message":"Error reuploading authorization document","documentId":14,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:21.467Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"14","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:23.517Z","level":"ERROR","message":"Error reuploading authorization document","documentId":14,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:23.518Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"14","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:27.577Z","level":"ERROR","message":"Error reuploading authorization document","documentId":14,"clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:07:27.578Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"14","clientId":80,"error":"Unknown column 'updated_at' in 'field list'"}
{"timestamp":"2025-10-21T18:35:35.720Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":22,"clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:35.722Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"22","clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:36.803Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":22,"clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:36.804Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"22","clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:38.879Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":22,"clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:38.880Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"22","clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:42.985Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":22,"clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:35:42.986Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"22","clientId":80,"error":"Unknown column 'file_path' in 'field list'"}
{"timestamp":"2025-10-21T18:39:57.288Z","level":"ERROR","message":"Document file not found","type":"beneficiary","id":"22","filename":"beneficiary_22_1761071988254.jpg","constructedPath":"uploads\\verification\\beneficiaries\\beneficiary_22_1761071988254.jpg","uploadDir":"uploads/verification/beneficiaries"}
{"timestamp":"2025-10-21T18:40:40.486Z","level":"ERROR","message":"Document file not found","type":"beneficiary","id":"22","filename":"beneficiary_22_1761071988254.jpg","constructedPath":"uploads\\verification\\beneficiaries\\beneficiary_22_1761071988254.jpg","uploadDir":"uploads/verification/beneficiaries"}
{"timestamp":"2025-10-21T18:43:52.546Z","level":"ERROR","message":"Document file not found","type":"beneficiary","id":"22","filename":"beneficiary_22_1761071988254.jpg","constructedPath":"uploads\\verification\\beneficiaries\\beneficiary_22_1761071988254.jpg","uploadDir":"uploads/verification/beneficiaries"}
{"timestamp":"2025-10-21T19:31:10.591Z","level":"ERROR","message":"Failed to send document status notifications","documentId":67,"status":"rejected","error":"Bind parameters must not contain undefined. To pass SQL NULL specify JS null"}
{"timestamp":"2025-10-21T19:37:43.690Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:43.695Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:44.784Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:44.786Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:46.852Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:46.855Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:50.909Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:37:50.910Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:34.375Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:34.378Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:35.537Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:35.546Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:37.712Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:37.714Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:41.786Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:40:41.787Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:48.142Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:48.144Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:49.196Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:49.196Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:51.243Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:51.243Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:55.287Z","level":"ERROR","message":"Error reuploading supporting document","documentId":67,"clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T19:43:55.288Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"67","clientId":80,"error":"Unauthorized: This document does not belong to you"}
{"timestamp":"2025-10-21T20:27:10.754Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T20:29:20.512Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T20:31:42.796Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T20:36:54.047Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T20:36:55.686Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T20:36:57.614Z","level":"ERROR","message":"Hello Jasmin Lantara, your Community Tax Certificate (Cedula) was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T20:49:50.542Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:00:44.682Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:00:46.160Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:03:44.722Z","level":"ERROR","message":"Hello Jasmin Lantara, your Community Tax Certificate (Cedula) has been approved! Thank you for your submission.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:03:46.505Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency has been approved! Thank you for your submission.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:03:48.464Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID has been approved! Thank you for your submission.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:04:34.720Z","level":"ERROR","message":"Barangay Bula Document Hub: Great news, Jasmin Lantara! Your Barangay Clearance request #BC-2025-000002 is approved! Watch for our next update.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T21:46:34.579Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T21:46:34.584Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"1999-06-03","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09052342332","email":"rocolantara3321@outlook.com","house_number":"421","street":"Saging","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region":"Region XII (SOCCSKSARGEN)","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435353","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:46:34.586Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"1999-06-03","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09052342332","email":"rocolantara3321@outlook.com","house_number":"421","street":"Saging","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region":"Region XII (SOCCSKSARGEN)","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435353","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:46:35.659Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"1999-06-03","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09052342332","email":"rocolantara3321@outlook.com","house_number":"421","street":"Saging","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region":"Region XII (SOCCSKSARGEN)","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435353","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:46:37.709Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"1999-06-03","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09052342332","email":"rocolantara3321@outlook.com","house_number":"421","street":"Saging","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region":"Region XII (SOCCSKSARGEN)","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435353","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:46:41.757Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":1,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"1999-06-03","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09052342332","email":"rocolantara3321@outlook.com","house_number":"421","street":"Saging","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region":"Region XII (SOCCSKSARGEN)","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435353","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:49:53.806Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T21:49:53.810Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-04-02","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09063465353","email":"rocojunjun21312@outlook.com","house_number":"422","street":"Atis","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09063455443","email":null,"relationship_to_beneficiary":"sibling"},"has_pending_cases":false,"pending_cases_details":null,"voter_registration_status":true,"total_fee":150,"total_document_fee":150},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:49:53.812Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-04-02","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09063465353","email":"rocojunjun21312@outlook.com","house_number":"422","street":"Atis","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09063455443","email":null,"relationship_to_beneficiary":"sibling"},"has_pending_cases":false,"pending_cases_details":null,"voter_registration_status":true,"total_fee":150,"total_document_fee":150},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:49:54.870Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: BC-2025-000002","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: BC-2025-000002\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-04-02","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09063465353","email":"rocojunjun21312@outlook.com","house_number":"422","street":"Atis","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09063455443","email":null,"relationship_to_beneficiary":"sibling"},"has_pending_cases":false,"pending_cases_details":null,"voter_registration_status":true,"total_fee":150,"total_document_fee":150},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:49:56.920Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: BC-2025-000002","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: BC-2025-000002\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-04-02","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09063465353","email":"rocojunjun21312@outlook.com","house_number":"422","street":"Atis","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09063455443","email":null,"relationship_to_beneficiary":"sibling"},"has_pending_cases":false,"pending_cases_details":null,"voter_registration_status":true,"total_fee":150,"total_document_fee":150},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T21:50:00.981Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: BC-2025-000002","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: BC-2025-000002\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":2,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-04-02","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09063465353","email":"rocojunjun21312@outlook.com","house_number":"422","street":"Atis","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Roy","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09063455443","email":null,"relationship_to_beneficiary":"sibling"},"has_pending_cases":false,"pending_cases_details":null,"voter_registration_status":true,"total_fee":150,"total_document_fee":150},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:01.954Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T22:10:01.959Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:01.968Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:03.018Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:05.069Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:09.125Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000006\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:45.094Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T22:10:45.097Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:45.101Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:217:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:293:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:46.155Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000007","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000007\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:48.208Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000007","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000007\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:10:52.278Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000007","stack":"Error: Duplicate submission detected. Please wait before submitting another request. Recent request: CED-2025-000007\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:117:15)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-01-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09064353235","email":"roco21321@outlook.com","house_number":"31","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09053434543","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:38.008Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T22:15:38.015Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:240:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:316:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:38.018Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:240:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:316:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:39.084Z","level":"ERROR","message":"Controller error - submitRequest","error":"Duplicate submission detected. Please wait a moment before submitting another request.","stack":"Error: Duplicate submission detected. Please wait a moment before submitting another request.\n    at DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:135:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:41.172Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T22:15:41.176Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:240:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:316:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:41.178Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:240:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:316:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:45.265Z","level":"ERROR","message":"Error in document request submission transaction","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","clientId":80}
{"timestamp":"2025-10-21T22:15:45.268Z","level":"ERROR","message":"Error submitting document request","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:240:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:316:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:15:45.269Z","level":"ERROR","message":"Controller error - submitRequest","error":"Failed to create beneficiary: Column count doesn't match value count at row 1","stack":"Error: Failed to create beneficiary: Column count doesn't match value count at row 1\n    at DocumentRequest.create (D:\\brgy_docu_hub\\rhai_backend\\src\\models\\DocumentRequest.js:175:17)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at async transaction (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:240:28)\n    at async executeTransactionCallback (D:\\brgy_docu_hub\\rhai_backend\\src\\config\\database.js:102:20)\n    at async DocumentRequestService.submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\services\\documentRequestService.js:316:26)\n    at async submitRequest (D:\\brgy_docu_hub\\rhai_backend\\src\\controllers\\documentRequestController.js:89:22)","clientId":80,"requestData":{"document_type_id":1,"purpose_category_id":1,"purpose_details":null,"payment_method_id":2,"delivery_method":"pickup","priority":"normal","is_third_party_request":true,"requestor_notes":null,"beneficiary":{"first_name":"Roco","middle_name":null,"last_name":"Lantara","suffix":null,"birth_date":"2000-02-21","gender":"male","civil_status_id":1,"nationality":"Filipino","phone_number":"09056345664","email":"roco123213@outlook.com","house_number":"231","street":"Guava","subdivision":null,"barangay":"Bula","city_municipality":"General Santos City (Dadiangas)","province":"South Cotabato","postal_code":null,"years_of_residency":null,"months_of_residency":null,"relationship_to_requestor":"sibling","region_code":"12","province_code":"1263","city_code":"126303","barangay_code":"126303005"},"authorized_pickup":{"first_name":"Jay","middle_name":null,"last_name":"Lantara","suffix":null,"phone_number":"09045435434","email":null,"relationship_to_beneficiary":"sibling"},"annual_income":20000,"monthly_income":0,"property_assessed_value":0,"business_income":0,"business_gross_receipts":0,"occupation":null,"employer_name":null,"employer_address":null,"business_name":null,"business_address":null,"business_type":null,"property_location":null,"tin_number":null,"previous_ctc_number":null,"previous_ctc_date_issued":null,"previous_ctc_place_issued":null,"has_real_property":false,"has_personal_property":false,"personal_property_value":0,"computed_tax":25,"total_fee":100,"total_document_fee":100},"errorDetails":{"name":"Error"}}
{"timestamp":"2025-10-21T22:23:27.859Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:23:32.880Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:23:41.079Z","level":"ERROR","message":"Hello Jasmin Lantara, your Valid ID for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:23:41.163Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:23:48.834Z","level":"ERROR","message":"Hello Jasmin Lantara, your Authorization Letter for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:23:50.181Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:34:32.524Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:34:32.537Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:34:33.657Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:34:33.658Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:34:35.755Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:34:35.757Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:34:39.888Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:34:39.889Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:15.134Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:35:29.345Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:35:29.353Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:35:30.469Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:30.471Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:32.506Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:32.507Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:36.559Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:36.563Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:35:55.487Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:36:01.645Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:36:10.271Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:37:09.681Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:37:09.686Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:37:10.736Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:37:10.738Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:37:12.778Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:37:12.779Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:37:16.835Z","level":"ERROR","message":"Error reuploading beneficiary verification document","beneficiaryId":24,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:37:16.837Z","level":"ERROR","message":"Failed to reupload beneficiary verification document","beneficiaryId":"24","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:40:44.523Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:40:50.647Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:41:01.082Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T22:41:06.487Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:41:15.294Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:41:40.361Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T22:42:04.108Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:42:19.896Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:42:27.237Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:42:36.155Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:43:14.583Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T22:44:43.526Z","level":"ERROR","message":"Error reuploading authorization document","documentId":22,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:44:43.529Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"22","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:44:44.601Z","level":"ERROR","message":"Error reuploading authorization document","documentId":22,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:44:44.604Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"22","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:44:46.644Z","level":"ERROR","message":"Error reuploading authorization document","documentId":22,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:44:46.646Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"22","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:44:50.691Z","level":"ERROR","message":"Error reuploading authorization document","documentId":22,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:44:50.692Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"22","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:47:42.063Z","level":"ERROR","message":"Error reuploading authorization document","documentId":23,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:47:42.066Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"23","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T22:47:43.107Z","level":"ERROR","message":"Error reuploading authorization document","documentId":23,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:47:43.108Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"23","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:47:45.143Z","level":"ERROR","message":"Error reuploading authorization document","documentId":23,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:47:45.145Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"23","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:47:49.194Z","level":"ERROR","message":"Error reuploading authorization document","documentId":23,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:47:49.195Z","level":"ERROR","message":"Failed to reupload authorization document","documentId":"23","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T22:48:54.399Z","level":"ERROR","message":"Hello Jasmin Lantara, your Authorization Letter for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:51:16.348Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":23,"clientId":80}
{"timestamp":"2025-10-21T22:51:37.565Z","level":"ERROR","message":"Hello Jasmin Lantara, your Authorization Letter for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:51:39.198Z","level":"ERROR","message":"Hello Jasmin Lantara, your Valid ID for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:51:44.655Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:51:50.787Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:52:05.040Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T22:52:14.722Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":22,"clientId":80}
{"timestamp":"2025-10-21T22:52:35.433Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":23,"clientId":80}
{"timestamp":"2025-10-21T22:52:41.545Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:52:51.405Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:53:25.047Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T22:53:36.271Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:53:41.655Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:53:47.115Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T22:54:00.012Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:54:09.172Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Roco Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T22:54:36.528Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":24,"clientId":80}
{"timestamp":"2025-10-21T23:03:31.343Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:03:36.870Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:03:43.898Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:03:52.958Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:03:55.338Z","level":"ERROR","message":"Hello Jasmin Lantara, your Valid ID for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:04:03.160Z","level":"ERROR","message":"Hello Jasmin Lantara, your Authorization Letter for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:04:13.645Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:04:28.380Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:05:58.189Z","level":"ERROR","message":"Hello Jasmin Lantara, your Community Tax Certificate (Cedula) was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:09:04.847Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":24,"clientId":80}
{"timestamp":"2025-10-21T23:09:19.193Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":25,"clientId":80}
{"timestamp":"2025-10-21T23:09:41.025Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","beneficiaryId":26,"clientId":80}
{"timestamp":"2025-10-21T23:09:50.814Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T23:09:50.825Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T23:09:51.875Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:09:51.875Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:09:53.942Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:09:53.945Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:09:57.993Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:09:57.993Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:10:29.206Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:11:25.502Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T23:11:25.507Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T23:11:26.550Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:11:26.551Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:11:28.591Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:11:28.591Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:11:32.654Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:11:32.662Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:13:45.393Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:16:04.648Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T23:16:04.654Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"notificationService.notifyAllAdmins is not a function"}
{"timestamp":"2025-10-21T23:16:05.735Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:16:05.736Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:16:07.786Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:16:07.787Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:16:11.870Z","level":"ERROR","message":"Error reuploading supporting document","documentId":71,"clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:16:11.878Z","level":"ERROR","message":"Failed to reupload supporting document","documentId":"71","clientId":80,"error":"Only rejected documents can be reuploaded"}
{"timestamp":"2025-10-21T23:20:05.178Z","level":"ERROR","message":"Hello Jasmin Lantara, your Proof of Residency was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:42:00.897Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":71,"clientId":80}
{"timestamp":"2025-10-21T23:43:08.343Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":72,"clientId":80}
{"timestamp":"2025-10-21T23:43:19.322Z","level":"ERROR","message":"Failed to send notifications to admins","error":"Table 'barangay_management_system.admin_accounts' doesn't exist","documentId":70,"clientId":80}
{"timestamp":"2025-10-21T23:53:58.548Z","level":"ERROR","message":"Hello Jasmin Lantara, your Government ID was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:53:58.553Z","level":"ERROR","message":"Failed to send document rejection SMS","documentId":70,"accountId":80,"phoneNumber":"09955958358","error":"Request failed with status code 429"}
{"timestamp":"2025-10-21T23:54:01.936Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:54:01.938Z","level":"ERROR","message":"Failed to send beneficiary verification rejection SMS","beneficiaryId":26,"accountId":80,"phoneNumber":"09955958358","error":"Request failed with status code 429"}
{"timestamp":"2025-10-21T23:54:09.187Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:54:09.188Z","level":"ERROR","message":"Failed to send beneficiary verification rejection SMS","beneficiaryId":26,"accountId":80,"phoneNumber":"09955958358","error":"Request failed with status code 429"}
{"timestamp":"2025-10-21T23:54:09.298Z","level":"ERROR","message":"Hello Jasmin Lantara, your Authorization Letter for authorized pickup was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:54:16.377Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:54:16.378Z","level":"ERROR","message":"Failed to send beneficiary verification rejection SMS","beneficiaryId":26,"accountId":80,"phoneNumber":"09955958358","error":"Request failed with status code 429"}
{"timestamp":"2025-10-21T23:54:24.754Z","level":"ERROR","message":"Hello Jasmin Lantara, the PSA Birth Certificate for Leah Lantara was rejected. Please reupload in your account.","recipients":"09955958358","error":"Request failed with status code 429","response":{"message":"You have reached your daily limit, you only have 0 remaining","hasReachedLimit":true,"dailyLimit":50,"dailyRemaining":0,"monthlyRemaining":64,"bulkSendLimit":50,"monthlyLimit":300},"status":429,"statusText":"Too Many Requests"}
{"timestamp":"2025-10-21T23:54:24.755Z","level":"ERROR","message":"Failed to send beneficiary verification rejection SMS","beneficiaryId":26,"accountId":80,"phoneNumber":"09955958358","error":"Request failed with status code 429"}
